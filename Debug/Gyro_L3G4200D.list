
Gyro_L3G4200D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef8  08003ef8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef8  08003ef8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef8  08003ef8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003f0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003f0c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159f8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b5  00000000  00000000  00035a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  000392e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016218  00000000  00000000  0003a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150a2  00000000  00000000  000504f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d91c  00000000  00000000  0006559a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df4  00000000  00000000  000f2f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003e40 	.word	0x08003e40

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003e40 	.word	0x08003e40

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fb69 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f88f 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f963 	bl	80006c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fe:	f000 f913 	bl	8000628 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000402:	f000 f8d1 	bl	80005a8 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //choose device mode from enum
  enum deviceOperationMode setDeviceIntoMode = Device_Mode_Normal;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
  //choose buffer mode from enum
  enum bufferOperationMode setBufferMode = Buffer_Mode_Bypass;
 800040c:	1dbb      	adds	r3, r7, #6
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
  //set device mode
//  setDeviceMode(setDeviceIntoMode, &hi2c1);
  setDeviceIntoNormal(&hi2c1);
 8000412:	4b3c      	ldr	r3, [pc, #240]	; (8000504 <main+0x118>)
 8000414:	0018      	movs	r0, r3
 8000416:	f003 fad9 	bl	80039cc <setDeviceIntoNormal>
  HAL_Delay(300);
 800041a:	2396      	movs	r3, #150	; 0x96
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fb8e 	bl	8000b40 <HAL_Delay>
  //set buffer mode
  setBuffferMode(setBufferMode, &hi2c1);
 8000424:	4a37      	ldr	r2, [pc, #220]	; (8000504 <main+0x118>)
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f003 fb23 	bl	8003a78 <setBuffferMode>
  //enable buffer
  setFIFOEnable(&hi2c1);
 8000432:	4b34      	ldr	r3, [pc, #208]	; (8000504 <main+0x118>)
 8000434:	0018      	movs	r0, r3
 8000436:	f003 faef 	bl	8003a18 <setFIFOEnable>

  while (1)
  {
	  bufferData[0]=readDeviceName(&hi2c1);
 800043a:	4b32      	ldr	r3, [pc, #200]	; (8000504 <main+0x118>)
 800043c:	0018      	movs	r0, r3
 800043e:	f003 fa35 	bl	80038ac <readDeviceName>
 8000442:	0003      	movs	r3, r0
 8000444:	001a      	movs	r2, r3
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <main+0x11c>)
 8000448:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 800044a:	200a      	movs	r0, #10
 800044c:	f000 fb78 	bl	8000b40 <HAL_Delay>
	  bufferData[1]=readControlRegister1(&hi2c1);
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <main+0x118>)
 8000452:	0018      	movs	r0, r3
 8000454:	f003 fa65 	bl	8003922 <readControlRegister1>
 8000458:	0003      	movs	r3, r0
 800045a:	001a      	movs	r2, r3
 800045c:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <main+0x11c>)
 800045e:	705a      	strb	r2, [r3, #1]
	  HAL_Delay(10);
 8000460:	200a      	movs	r0, #10
 8000462:	f000 fb6d 	bl	8000b40 <HAL_Delay>
	  bufferData[2]=readOutputTemperature(&hi2c1);
 8000466:	4b27      	ldr	r3, [pc, #156]	; (8000504 <main+0x118>)
 8000468:	0018      	movs	r0, r3
 800046a:	f003 fb99 	bl	8003ba0 <readOutputTemperature>
 800046e:	0003      	movs	r3, r0
 8000470:	001a      	movs	r2, r3
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <main+0x11c>)
 8000474:	709a      	strb	r2, [r3, #2]
	  HAL_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f000 fb62 	bl	8000b40 <HAL_Delay>
	  bufferData[3]=readRegister(&hi2c1, DEVICE_FIFO_CTRL_REG);
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <main+0x118>)
 800047e:	212e      	movs	r1, #46	; 0x2e
 8000480:	0018      	movs	r0, r3
 8000482:	f003 fa2e 	bl	80038e2 <readRegister>
 8000486:	0003      	movs	r3, r0
 8000488:	001a      	movs	r2, r3
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <main+0x11c>)
 800048c:	70da      	strb	r2, [r3, #3]
	  HAL_Delay(10);
 800048e:	200a      	movs	r0, #10
 8000490:	f000 fb56 	bl	8000b40 <HAL_Delay>
	  bufferData[4]=isFIFOstoreFull(&hi2c1);
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <main+0x118>)
 8000496:	0018      	movs	r0, r3
 8000498:	f003 fb3e 	bl	8003b18 <isFIFOstoreFull>
 800049c:	0003      	movs	r3, r0
 800049e:	001a      	movs	r2, r3
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <main+0x11c>)
 80004a2:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(10);
 80004a4:	200a      	movs	r0, #10
 80004a6:	f000 fb4b 	bl	8000b40 <HAL_Delay>
	  bufferData[5]=isFIFOstoreEmpty(&hi2c1);
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <main+0x118>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f003 fb55 	bl	8003b5c <isFIFOstoreEmpty>
 80004b2:	0003      	movs	r3, r0
 80004b4:	001a      	movs	r2, r3
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <main+0x11c>)
 80004b8:	715a      	strb	r2, [r3, #5]
	  HAL_Delay(10);
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 fb40 	bl	8000b40 <HAL_Delay>
	  rollAxisData = readRollValue(&hi2c1);
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <main+0x118>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f003 fb83 	bl	8003bce <readRollValue>
 80004c8:	0003      	movs	r3, r0
 80004ca:	001a      	movs	r2, r3
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <main+0x120>)
 80004ce:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f000 fb35 	bl	8000b40 <HAL_Delay>
	  pitchAxisData = readPitchValue(&hi2c1);
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <main+0x118>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f003 fbd2 	bl	8003c82 <readPitchValue>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <main+0x124>)
 80004e4:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f000 fb2a 	bl	8000b40 <HAL_Delay>
	  yawAxisSData = readYawValue(&hi2c1);
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <main+0x118>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fc20 	bl	8003d34 <readYawValue>
 80004f4:	0003      	movs	r3, r0
 80004f6:	001a      	movs	r2, r3
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x128>)
 80004fa:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10);
 80004fc:	200a      	movs	r0, #10
 80004fe:	f000 fb1f 	bl	8000b40 <HAL_Delay>
	  bufferData[0]=readDeviceName(&hi2c1);
 8000502:	e79a      	b.n	800043a <main+0x4e>
 8000504:	20000038 	.word	0x20000038
 8000508:	20000028 	.word	0x20000028
 800050c:	20000032 	.word	0x20000032
 8000510:	20000034 	.word	0x20000034
 8000514:	20000036 	.word	0x20000036

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b093      	sub	sp, #76	; 0x4c
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	2414      	movs	r4, #20
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	2334      	movs	r3, #52	; 0x34
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f003 fc81 	bl	8003e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	0018      	movs	r0, r3
 8000532:	2310      	movs	r3, #16
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f003 fc7a 	bl	8003e30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fbdf 	bl	8001d04 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2202      	movs	r2, #2
 800054a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	0052      	lsls	r2, r2, #1
 8000552:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2240      	movs	r2, #64	; 0x40
 800055e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fc17 	bl	8001d9c <HAL_RCC_OscConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000572:	f000 f909 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2100      	movs	r1, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f001 ff12 	bl	80023bc <HAL_RCC_ClockConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800059c:	f000 f8f4 	bl	8000788 <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b013      	add	sp, #76	; 0x4c
 80005a6:	bd90      	pop	{r4, r7, pc}

080005a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_I2C1_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <MX_I2C1_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_I2C1_Init+0x74>)
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <MX_I2C1_Init+0x7c>)
 80005b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_I2C1_Init+0x74>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_I2C1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_I2C1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_I2C1_Init+0x74>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fd15 	bl	8001014 <HAL_I2C_Init>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ee:	f000 f8cb 	bl	8000788 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_I2C1_Init+0x74>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 faec 	bl	8001bd4 <HAL_I2CEx_ConfigAnalogFilter>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000600:	f000 f8c2 	bl	8000788 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_I2C1_Init+0x74>)
 8000606:	2100      	movs	r1, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fb2f 	bl	8001c6c <HAL_I2CEx_ConfigDigitalFilter>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000612:	f000 f8b9 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000038 	.word	0x20000038
 8000620:	40005400 	.word	0x40005400
 8000624:	00303d5b 	.word	0x00303d5b

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <MX_USART2_UART_Init+0x98>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000634:	22e1      	movs	r2, #225	; 0xe1
 8000636:	0252      	lsls	r2, r2, #9
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	0552      	lsls	r2, r2, #21
 8000640:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000650:	220c      	movs	r2, #12
 8000652:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fc3f 	bl	8002ef8 <HAL_UART_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800067e:	f000 f883 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f003 f830 	bl	80036ec <HAL_UARTEx_SetTxFifoThreshold>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000690:	f000 f87a 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000696:	2100      	movs	r1, #0
 8000698:	0018      	movs	r0, r3
 800069a:	f003 f867 	bl	800376c <HAL_UARTEx_SetRxFifoThreshold>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80006a2:	f000 f871 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <MX_USART2_UART_Init+0x94>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 ffe5 	bl	8003678 <HAL_UARTEx_DisableFifoMode>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80006b2:	f000 f869 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000088 	.word	0x20000088
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	240c      	movs	r4, #12
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	2314      	movs	r3, #20
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f003 fbab 	bl	8003e30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_GPIO_Init+0x9c>)
 80006dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_GPIO_Init+0x9c>)
 80006e0:	2104      	movs	r1, #4
 80006e2:	430a      	orrs	r2, r1
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_GPIO_Init+0x9c>)
 80006e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ea:	2204      	movs	r2, #4
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_GPIO_Init+0x9c>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_GPIO_Init+0x9c>)
 80006f8:	2120      	movs	r1, #32
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0x9c>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000702:	2220      	movs	r2, #32
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0x9c>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_GPIO_Init+0x9c>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_GPIO_Init+0x9c>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fc54 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2220      	movs	r2, #32
 8000736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2202      	movs	r2, #2
 8000748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800074a:	187a      	adds	r2, r7, r1
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fadc 	bl	8000d10 <HAL_GPIO_Init>

}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b009      	add	sp, #36	; 0x24
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d101      	bne.n	800077a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000776:	f000 f9c7 	bl	8000b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40012c00 	.word	0x40012c00

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_MspInit+0x4c>)
 800079c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	430a      	orrs	r2, r1
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x4c>)
 80007b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <HAL_MspInit+0x4c>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0549      	lsls	r1, r1, #21
 80007bc:	430a      	orrs	r2, r1
 80007be:	63da      	str	r2, [r3, #60]	; 0x3c
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <HAL_MspInit+0x4c>)
 80007c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	055b      	lsls	r3, r3, #21
 80007c8:	4013      	ands	r3, r2
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007ce:	23c0      	movs	r3, #192	; 0xc0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 f9d8 	bl	8000b88 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b091      	sub	sp, #68	; 0x44
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	232c      	movs	r3, #44	; 0x2c
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f003 fb1a 	bl	8003e30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	2410      	movs	r4, #16
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	231c      	movs	r3, #28
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f003 fb12 	bl	8003e30 <memset>
  if(hi2c->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d13f      	bne.n	8000896 <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2220      	movs	r2, #32
 800081a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	f001 ff9d 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f7ff ffab 	bl	8000788 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084a:	212c      	movs	r1, #44	; 0x2c
 800084c:	187b      	adds	r3, r7, r1
 800084e:	22c0      	movs	r2, #192	; 0xc0
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2212      	movs	r2, #18
 8000858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2206      	movs	r2, #6
 800086a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	187a      	adds	r2, r7, r1
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fa4b 	bl	8000d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 800087c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0389      	lsls	r1, r1, #14
 8000884:	430a      	orrs	r2, r1
 8000886:	63da      	str	r2, [r3, #60]	; 0x3c
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 800088a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	039b      	lsls	r3, r3, #14
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b011      	add	sp, #68	; 0x44
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b091      	sub	sp, #68	; 0x44
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	232c      	movs	r3, #44	; 0x2c
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	0018      	movs	r0, r3
 80008b6:	2314      	movs	r3, #20
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f003 fab8 	bl	8003e30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	2410      	movs	r4, #16
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	231c      	movs	r3, #28
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 fab0 	bl	8003e30 <memset>
  if(huart->Instance==USART2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a22      	ldr	r2, [pc, #136]	; (8000960 <HAL_UART_MspInit+0xb8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d13e      	bne.n	8000958 <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 ff3b 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008f2:	f7ff ff49 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_UART_MspInit+0xbc>)
 80008f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_UART_MspInit+0xbc>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0289      	lsls	r1, r1, #10
 8000900:	430a      	orrs	r2, r1
 8000902:	63da      	str	r2, [r3, #60]	; 0x3c
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_UART_MspInit+0xbc>)
 8000906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	029b      	lsls	r3, r3, #10
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_UART_MspInit+0xbc>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_UART_MspInit+0xbc>)
 8000918:	2101      	movs	r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0xbc>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2201      	movs	r2, #1
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092a:	212c      	movs	r1, #44	; 0x2c
 800092c:	187b      	adds	r3, r7, r1
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2201      	movs	r2, #1
 8000948:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	187a      	adds	r2, r7, r1
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f9dc 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b011      	add	sp, #68	; 0x44
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	0019      	movs	r1, r3
 800097e:	200d      	movs	r0, #13
 8000980:	f000 f9a0 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000984:	200d      	movs	r0, #13
 8000986:	f000 f9b2 	bl	8000cee <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_InitTick+0xa8>)
 800098c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_InitTick+0xa8>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0109      	lsls	r1, r1, #4
 8000994:	430a      	orrs	r2, r1
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_InitTick+0xa8>)
 800099a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a6:	230c      	movs	r3, #12
 80009a8:	18fa      	adds	r2, r7, r3
 80009aa:	2310      	movs	r3, #16
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 fead 	bl	8002710 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b6:	f001 fe95 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80009ba:	0003      	movs	r3, r0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	4914      	ldr	r1, [pc, #80]	; (8000a14 <HAL_InitTick+0xac>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff fb9c 	bl	8000100 <__udivsi3>
 80009c8:	0003      	movs	r3, r0
 80009ca:	3b01      	subs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0xb0>)
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_InitTick+0xb4>)
 80009d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_InitTick+0xb0>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_InitTick+0xb8>)
 80009d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_InitTick+0xb0>)
 80009dc:	6a3a      	ldr	r2, [r7, #32]
 80009de:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_InitTick+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_InitTick+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_InitTick+0xb0>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 ffec 	bl	80029cc <HAL_TIM_Base_Init>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d105      	bne.n	8000a04 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <HAL_InitTick+0xb0>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 f846 	bl	8002a8c <HAL_TIM_Base_Start_IT>
 8000a00:	0003      	movs	r3, r0
 8000a02:	e000      	b.n	8000a06 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b00a      	add	sp, #40	; 0x28
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40021000 	.word	0x40021000
 8000a14:	000f4240 	.word	0x000f4240
 8000a18:	20000118 	.word	0x20000118
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	000003e7 	.word	0x000003e7

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 f86e 	bl	8002b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000118 	.word	0x20000118

08000a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f7ff fff6 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa2:	f003 f9a1 	bl	8003de8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aa6:	f7ff fca1 	bl	80003ec <main>

08000aaa <LoopForever>:

LoopForever:
  b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab8:	08003f00 	.word	0x08003f00
  ldr r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac0:	20000168 	.word	0x20000168

08000ac4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x3c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Init+0x3c>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	0049      	lsls	r1, r1, #1
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f7ff ff40 	bl	8000968 <HAL_InitTick>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fe4e 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	001a      	movs	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	18d2      	adds	r2, r2, r3
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000164 	.word	0x20000164

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000164 	.word	0x20000164

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff fff0 	bl	8000b2c <HAL_GetTick>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	001a      	movs	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	189b      	adds	r3, r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	f7ff ffe0 	bl	8000b2c <HAL_GetTick>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	0019      	movs	r1, r3
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	fffff9ff 	.word	0xfffff9ff

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc6:	d809      	bhi.n	8000bdc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	231f      	movs	r3, #31
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_EnableIRQ+0x30>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	000a      	movs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	0002      	movs	r2, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bfc:	d828      	bhi.n	8000c50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <__NVIC_SetPriority+0xd4>)
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	33c0      	adds	r3, #192	; 0xc0
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	589b      	ldr	r3, [r3, r2]
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	0011      	movs	r1, r2
 8000c14:	2203      	movs	r2, #3
 8000c16:	400a      	ands	r2, r1
 8000c18:	00d2      	lsls	r2, r2, #3
 8000c1a:	21ff      	movs	r1, #255	; 0xff
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	43d2      	mvns	r2, r2
 8000c22:	401a      	ands	r2, r3
 8000c24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	019b      	lsls	r3, r3, #6
 8000c2a:	22ff      	movs	r2, #255	; 0xff
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0018      	movs	r0, r3
 8000c34:	2303      	movs	r3, #3
 8000c36:	4003      	ands	r3, r0
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3c:	481f      	ldr	r0, [pc, #124]	; (8000cbc <__NVIC_SetPriority+0xd4>)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	430a      	orrs	r2, r1
 8000c48:	33c0      	adds	r3, #192	; 0xc0
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c4e:	e031      	b.n	8000cb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <__NVIC_SetPriority+0xd8>)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0019      	movs	r1, r3
 8000c58:	230f      	movs	r3, #15
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	3b08      	subs	r3, #8
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3306      	adds	r3, #6
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	3304      	adds	r3, #4
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0011      	movs	r1, r2
 8000c70:	2203      	movs	r2, #3
 8000c72:	400a      	ands	r2, r1
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	401a      	ands	r2, r3
 8000c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	401a      	ands	r2, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2303      	movs	r3, #3
 8000c92:	4003      	ands	r3, r0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <__NVIC_SetPriority+0xd8>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001c      	movs	r4, r3
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	4023      	ands	r3, r4
 8000ca4:	3b08      	subs	r3, #8
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	3306      	adds	r3, #6
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	18c3      	adds	r3, r0, r3
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b003      	add	sp, #12
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	210f      	movs	r1, #15
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	1c02      	adds	r2, r0, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff81 	bl	8000be8 <__NVIC_SetPriority>
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff57 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e147      	b.n	8000fb0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d100      	bne.n	8000d38 <HAL_GPIO_Init+0x28>
 8000d36:	e138      	b.n	8000faa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	43da      	mvns	r2, r3
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2203      	movs	r2, #3
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	58d3      	ldr	r3, [r2, r3]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2107      	movs	r1, #7
 8000e26:	400b      	ands	r3, r1
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	401a      	ands	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	23c0      	movs	r3, #192	; 0xc0
 8000e7c:	029b      	lsls	r3, r3, #10
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d100      	bne.n	8000e84 <HAL_GPIO_Init+0x174>
 8000e82:	e092      	b.n	8000faa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	589b      	ldr	r3, [r3, r2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x1ca>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x1c6>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <HAL_GPIO_Init+0x2c0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x1c2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_GPIO_Init+0x2c4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x1be>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000eda:	2300      	movs	r3, #0
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	2103      	movs	r1, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	00d2      	lsls	r2, r2, #3
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eec:	4936      	ldr	r1, [pc, #216]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	035b      	lsls	r3, r3, #13
 8000f12:	4013      	ands	r3, r2
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f50:	2384      	movs	r3, #132	; 0x84
 8000f52:	58d3      	ldr	r3, [r2, r3]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f74:	4914      	ldr	r1, [pc, #80]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f76:	2284      	movs	r2, #132	; 0x84
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	4013      	ands	r3, r2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fa2:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	1e13      	subs	r3, r2, #0
 8000fba:	d000      	beq.n	8000fbe <HAL_GPIO_Init+0x2ae>
 8000fbc:	e6b0      	b.n	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	50000400 	.word	0x50000400
 8000fd0:	50000800 	.word	0x50000800
 8000fd4:	50000c00 	.word	0x50000c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	1cbb      	adds	r3, r7, #2
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	1c7b      	adds	r3, r7, #1
 8000fec:	1c0a      	adds	r2, r1, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff0:	1c7b      	adds	r3, r7, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff8:	1cbb      	adds	r3, r7, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001002:	1cbb      	adds	r3, r7, #2
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e082      	b.n	800112c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2241      	movs	r2, #65	; 0x41
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fbd1 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2241      	movs	r2, #65	; 0x41
 8001046:	2124      	movs	r1, #36	; 0x24
 8001048:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4934      	ldr	r1, [pc, #208]	; (8001134 <HAL_I2C_Init+0x120>)
 8001064:	400a      	ands	r2, r1
 8001066:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4931      	ldr	r1, [pc, #196]	; (8001138 <HAL_I2C_Init+0x124>)
 8001074:	400a      	ands	r2, r1
 8001076:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0209      	lsls	r1, r1, #8
 800108c:	430a      	orrs	r2, r1
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e007      	b.n	80010a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2184      	movs	r1, #132	; 0x84
 800109c:	0209      	lsls	r1, r1, #8
 800109e:	430a      	orrs	r2, r1
 80010a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d104      	bne.n	80010b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	491f      	ldr	r1, [pc, #124]	; (800113c <HAL_I2C_Init+0x128>)
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	491a      	ldr	r1, [pc, #104]	; (8001138 <HAL_I2C_Init+0x124>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	431a      	orrs	r2, r3
 80010de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69d9      	ldr	r1, [r3, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1a      	ldr	r2, [r3, #32]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2241      	movs	r2, #65	; 0x41
 8001118:	2120      	movs	r1, #32
 800111a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2242      	movs	r2, #66	; 0x42
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f0ffffff 	.word	0xf0ffffff
 8001138:	ffff7fff 	.word	0xffff7fff
 800113c:	02008000 	.word	0x02008000

08001140 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	000c      	movs	r4, r1
 800114a:	0010      	movs	r0, r2
 800114c:	0019      	movs	r1, r3
 800114e:	230a      	movs	r3, #10
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	1c22      	adds	r2, r4, #0
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	2308      	movs	r3, #8
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	1c02      	adds	r2, r0, #0
 800115c:	801a      	strh	r2, [r3, #0]
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	1c0a      	adds	r2, r1, #0
 8001162:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2241      	movs	r2, #65	; 0x41
 8001168:	5c9b      	ldrb	r3, [r3, r2]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b20      	cmp	r3, #32
 800116e:	d000      	beq.n	8001172 <HAL_I2C_Mem_Write+0x32>
 8001170:	e10c      	b.n	800138c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_I2C_Mem_Write+0x42>
 8001178:	232c      	movs	r3, #44	; 0x2c
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0ff      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	5c9b      	ldrb	r3, [r3, r2]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <HAL_I2C_Mem_Write+0x5c>
 8001198:	2302      	movs	r3, #2
 800119a:	e0f8      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2240      	movs	r2, #64	; 0x40
 80011a0:	2101      	movs	r1, #1
 80011a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011a4:	f7ff fcc2 	bl	8000b2c <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	0219      	lsls	r1, r3, #8
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2319      	movs	r3, #25
 80011b8:	2201      	movs	r2, #1
 80011ba:	f000 fb0b 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0e3      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2241      	movs	r2, #65	; 0x41
 80011ca:	2121      	movs	r1, #33	; 0x21
 80011cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2242      	movs	r2, #66	; 0x42
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	222c      	movs	r2, #44	; 0x2c
 80011e6:	18ba      	adds	r2, r7, r2
 80011e8:	8812      	ldrh	r2, [r2, #0]
 80011ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011f2:	1dbb      	adds	r3, r7, #6
 80011f4:	881c      	ldrh	r4, [r3, #0]
 80011f6:	2308      	movs	r3, #8
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	230a      	movs	r3, #10
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	8819      	ldrh	r1, [r3, #0]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	0023      	movs	r3, r4
 800120e:	f000 f9f9 	bl	8001604 <I2C_RequestMemoryWrite>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d005      	beq.n	8001222 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	2100      	movs	r1, #0
 800121c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0b5      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001226:	b29b      	uxth	r3, r3
 8001228:	2bff      	cmp	r3, #255	; 0xff
 800122a:	d911      	bls.n	8001250 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	b2da      	uxtb	r2, r3
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	045c      	lsls	r4, r3, #17
 800123c:	230a      	movs	r3, #10
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	8819      	ldrh	r1, [r3, #0]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	0023      	movs	r3, r4
 800124a:	f000 fc89 	bl	8001b60 <I2C_TransferConfig>
 800124e:	e012      	b.n	8001276 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29a      	uxth	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	b2da      	uxtb	r2, r3
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	049c      	lsls	r4, r3, #18
 8001264:	230a      	movs	r3, #10
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	8819      	ldrh	r1, [r3, #0]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	0023      	movs	r3, r4
 8001272:	f000 fc75 	bl	8001b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fae8 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e081      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03a      	beq.n	800133a <HAL_I2C_Mem_Write+0x1fa>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d136      	bne.n	800133a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	0013      	movs	r3, r2
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	f000 fa7b 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e053      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d911      	bls.n	8001314 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	045c      	lsls	r4, r3, #17
 8001300:	230a      	movs	r3, #10
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	8819      	ldrh	r1, [r3, #0]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	0023      	movs	r3, r4
 800130e:	f000 fc27 	bl	8001b60 <I2C_TransferConfig>
 8001312:	e012      	b.n	800133a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001322:	b2da      	uxtb	r2, r3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	049c      	lsls	r4, r3, #18
 8001328:	230a      	movs	r3, #10
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	8819      	ldrh	r1, [r3, #0]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	0023      	movs	r3, r4
 8001336:	f000 fc13 	bl	8001b60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d198      	bne.n	8001276 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fac0 	bl	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e01a      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2220      	movs	r2, #32
 800135e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	490b      	ldr	r1, [pc, #44]	; (8001398 <HAL_I2C_Mem_Write+0x258>)
 800136c:	400a      	ands	r2, r1
 800136e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2241      	movs	r2, #65	; 0x41
 8001374:	2120      	movs	r1, #32
 8001376:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2242      	movs	r2, #66	; 0x42
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	e000      	b.n	800138e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800138c:	2302      	movs	r3, #2
  }
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b007      	add	sp, #28
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	fe00e800 	.word	0xfe00e800

0800139c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	000c      	movs	r4, r1
 80013a6:	0010      	movs	r0, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	230a      	movs	r3, #10
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	1c22      	adds	r2, r4, #0
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	2308      	movs	r3, #8
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	1c02      	adds	r2, r0, #0
 80013b8:	801a      	strh	r2, [r3, #0]
 80013ba:	1dbb      	adds	r3, r7, #6
 80013bc:	1c0a      	adds	r2, r1, #0
 80013be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2241      	movs	r2, #65	; 0x41
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b20      	cmp	r3, #32
 80013ca:	d000      	beq.n	80013ce <HAL_I2C_Mem_Read+0x32>
 80013cc:	e110      	b.n	80015f0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_I2C_Mem_Read+0x42>
 80013d4:	232c      	movs	r3, #44	; 0x2c
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e103      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2C_Mem_Read+0x5c>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e0fc      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2240      	movs	r2, #64	; 0x40
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001400:	f7ff fb94 	bl	8000b2c <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	0219      	lsls	r1, r3, #8
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2319      	movs	r3, #25
 8001414:	2201      	movs	r2, #1
 8001416:	f000 f9dd 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0e7      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2241      	movs	r2, #65	; 0x41
 8001426:	2122      	movs	r1, #34	; 0x22
 8001428:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2242      	movs	r2, #66	; 0x42
 800142e:	2140      	movs	r1, #64	; 0x40
 8001430:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	222c      	movs	r2, #44	; 0x2c
 8001442:	18ba      	adds	r2, r7, r2
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800144e:	1dbb      	adds	r3, r7, #6
 8001450:	881c      	ldrh	r4, [r3, #0]
 8001452:	2308      	movs	r3, #8
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	230a      	movs	r3, #10
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	8819      	ldrh	r1, [r3, #0]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	0023      	movs	r3, r4
 800146a:	f000 f92f 	bl	80016cc <I2C_RequestMemoryRead>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d005      	beq.n	800147e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	2100      	movs	r1, #0
 8001478:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0b9      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001482:	b29b      	uxth	r3, r3
 8001484:	2bff      	cmp	r3, #255	; 0xff
 8001486:	d911      	bls.n	80014ac <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	22ff      	movs	r2, #255	; 0xff
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	045c      	lsls	r4, r3, #17
 8001498:	230a      	movs	r3, #10
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	8819      	ldrh	r1, [r3, #0]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	4b56      	ldr	r3, [pc, #344]	; (80015fc <HAL_I2C_Mem_Read+0x260>)
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	0023      	movs	r3, r4
 80014a6:	f000 fb5b 	bl	8001b60 <I2C_TransferConfig>
 80014aa:	e012      	b.n	80014d2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	049c      	lsls	r4, r3, #18
 80014c0:	230a      	movs	r3, #10
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	8819      	ldrh	r1, [r3, #0]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_I2C_Mem_Read+0x260>)
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	0023      	movs	r3, r4
 80014ce:	f000 fb47 	bl	8001b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	0013      	movs	r3, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	2104      	movs	r1, #4
 80014e0:	f000 f978 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e082      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03a      	beq.n	800159e <HAL_I2C_Mem_Read+0x202>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152c:	2b00      	cmp	r3, #0
 800152e:	d136      	bne.n	800159e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	0013      	movs	r3, r2
 800153a:	2200      	movs	r2, #0
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	f000 f949 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e053      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154e:	b29b      	uxth	r3, r3
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d911      	bls.n	8001578 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	22ff      	movs	r2, #255	; 0xff
 8001558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155e:	b2da      	uxtb	r2, r3
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	045c      	lsls	r4, r3, #17
 8001564:	230a      	movs	r3, #10
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	8819      	ldrh	r1, [r3, #0]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	0023      	movs	r3, r4
 8001572:	f000 faf5 	bl	8001b60 <I2C_TransferConfig>
 8001576:	e012      	b.n	800159e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	b2da      	uxtb	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	049c      	lsls	r4, r3, #18
 800158c:	230a      	movs	r3, #10
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	2300      	movs	r3, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	0023      	movs	r3, r4
 800159a:	f000 fae1 	bl	8001b60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d194      	bne.n	80014d2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f98e 	bl	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015b4:	1e03      	subs	r3, r0, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e01a      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2220      	movs	r2, #32
 80015c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	490c      	ldr	r1, [pc, #48]	; (8001600 <HAL_I2C_Mem_Read+0x264>)
 80015d0:	400a      	ands	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2241      	movs	r2, #65	; 0x41
 80015d8:	2120      	movs	r1, #32
 80015da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2242      	movs	r2, #66	; 0x42
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80015f0:	2302      	movs	r3, #2
  }
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b007      	add	sp, #28
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	80002400 	.word	0x80002400
 8001600:	fe00e800 	.word	0xfe00e800

08001604 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	000c      	movs	r4, r1
 800160e:	0010      	movs	r0, r2
 8001610:	0019      	movs	r1, r3
 8001612:	250a      	movs	r5, #10
 8001614:	197b      	adds	r3, r7, r5
 8001616:	1c22      	adds	r2, r4, #0
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	2308      	movs	r3, #8
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	1c02      	adds	r2, r0, #0
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	1c0a      	adds	r2, r1, #0
 8001626:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	045c      	lsls	r4, r3, #17
 8001632:	197b      	adds	r3, r7, r5
 8001634:	8819      	ldrh	r1, [r3, #0]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <I2C_RequestMemoryWrite+0xc4>)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	0023      	movs	r3, r4
 800163e:	f000 fa8f 	bl	8001b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	0018      	movs	r0, r3
 800164a:	f000 f902 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e033      	b.n	80016be <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001656:	1dbb      	adds	r3, r7, #6
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800165e:	2308      	movs	r3, #8
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
 800166c:	e019      	b.n	80016a2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800166e:	2308      	movs	r3, #8
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	b2da      	uxtb	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	6a39      	ldr	r1, [r7, #32]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f8e3 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e014      	b.n	80016be <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001694:	2308      	movs	r3, #8
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80016a2:	6a3a      	ldr	r2, [r7, #32]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	0013      	movs	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	f000 f890 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	80002000 	.word	0x80002000

080016cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	000c      	movs	r4, r1
 80016d6:	0010      	movs	r0, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	250a      	movs	r5, #10
 80016dc:	197b      	adds	r3, r7, r5
 80016de:	1c22      	adds	r2, r4, #0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	2308      	movs	r3, #8
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	1c0a      	adds	r2, r1, #0
 80016ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	8819      	ldrh	r1, [r3, #0]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <I2C_RequestMemoryRead+0xc0>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	f000 fa2d 	bl	8001b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 f8a0 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e033      	b.n	8001782 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800171a:	1dbb      	adds	r3, r7, #6
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001722:	2308      	movs	r3, #8
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
 8001730:	e019      	b.n	8001766 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001732:	2308      	movs	r3, #8
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001746:	6a39      	ldr	r1, [r7, #32]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f881 	bl	8001852 <I2C_WaitOnTXISFlagUntilTimeout>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e014      	b.n	8001782 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001758:	2308      	movs	r3, #8
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001766:	6a3a      	ldr	r2, [r7, #32]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	0013      	movs	r3, r2
 8001770:	2200      	movs	r2, #0
 8001772:	2140      	movs	r1, #64	; 0x40
 8001774:	f000 f82e 	bl	80017d4 <I2C_WaitOnFlagUntilTimeout>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b004      	add	sp, #16
 8001788:	bdb0      	pop	{r4, r5, r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	80002000 	.word	0x80002000

08001790 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d103      	bne.n	80017ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d007      	beq.n	80017cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	619a      	str	r2, [r3, #24]
  }
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e4:	e021      	b.n	800182a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	d01e      	beq.n	800182a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ec:	f7ff f99e 	bl	8000b2c <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d302      	bcc.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d113      	bne.n	800182a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	2220      	movs	r2, #32
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2241      	movs	r2, #65	; 0x41
 8001812:	2120      	movs	r1, #32
 8001814:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2242      	movs	r2, #66	; 0x42
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4013      	ands	r3, r2
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	425a      	negs	r2, r3
 800183a:	4153      	adcs	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	001a      	movs	r2, r3
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d0ce      	beq.n	80017e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}

08001852 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800185e:	e02b      	b.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f86e 	bl	8001948 <I2C_IsErrorOccurred>
 800186c:	1e03      	subs	r3, r0, #0
 800186e:	d001      	beq.n	8001874 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e029      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3301      	adds	r3, #1
 8001878:	d01e      	beq.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187a:	f7ff f957 	bl	8000b2c <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d302      	bcc.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	2220      	movs	r2, #32
 8001896:	431a      	orrs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2241      	movs	r2, #65	; 0x41
 80018a0:	2120      	movs	r1, #32
 80018a2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2242      	movs	r2, #66	; 0x42
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d1cc      	bne.n	8001860 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018dc:	e028      	b.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f82f 	bl	8001948 <I2C_IsErrorOccurred>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e026      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff f91b 	bl	8000b2c <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	2220      	movs	r2, #32
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2241      	movs	r2, #65	; 0x41
 8001918:	2120      	movs	r1, #32
 800191a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2242      	movs	r2, #66	; 0x42
 8001920:	2100      	movs	r1, #0
 8001922:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e007      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2220      	movs	r2, #32
 8001938:	4013      	ands	r3, r2
 800193a:	2b20      	cmp	r3, #32
 800193c:	d1cf      	bne.n	80018de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2327      	movs	r3, #39	; 0x27
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2210      	movs	r2, #16
 8001970:	4013      	ands	r3, r2
 8001972:	d100      	bne.n	8001976 <I2C_IsErrorOccurred+0x2e>
 8001974:	e08e      	b.n	8001a94 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2210      	movs	r2, #16
 800197c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800197e:	e06c      	b.n	8001a5a <I2C_IsErrorOccurred+0x112>
 8001980:	2427      	movs	r4, #39	; 0x27
 8001982:	193b      	adds	r3, r7, r4
 8001984:	193a      	adds	r2, r7, r4
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	d064      	beq.n	8001a5a <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001990:	f7ff f8cc 	bl	8000b2c <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	d306      	bcc.n	80019ae <I2C_IsErrorOccurred+0x66>
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	193a      	adds	r2, r7, r4
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d155      	bne.n	8001a5a <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	01db      	lsls	r3, r3, #7
 80019b8:	4013      	ands	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019bc:	2013      	movs	r0, #19
 80019be:	183b      	adds	r3, r7, r0
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	2142      	movs	r1, #66	; 0x42
 80019c4:	5c52      	ldrb	r2, [r2, r1]
 80019c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	401a      	ands	r2, r3
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	429a      	cmp	r2, r3
 80019da:	d137      	bne.n	8001a4c <I2C_IsErrorOccurred+0x104>
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	01db      	lsls	r3, r3, #7
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d032      	beq.n	8001a4c <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80019e6:	183b      	adds	r3, r7, r0
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d02e      	beq.n	8001a4c <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	01c9      	lsls	r1, r1, #7
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a00:	f7ff f894 	bl	8000b2c <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a08:	e020      	b.n	8001a4c <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a0a:	f7ff f88f 	bl	8000b2c <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2027      	movs	r0, #39	; 0x27
 8001a16:	183a      	adds	r2, r7, r0
 8001a18:	1839      	adds	r1, r7, r0
 8001a1a:	7809      	ldrb	r1, [r1, #0]
 8001a1c:	7011      	strb	r1, [r2, #0]
 8001a1e:	2b19      	cmp	r3, #25
 8001a20:	d914      	bls.n	8001a4c <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	2220      	movs	r2, #32
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2241      	movs	r2, #65	; 0x41
 8001a32:	2120      	movs	r1, #32
 8001a34:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2242      	movs	r2, #66	; 0x42
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	2100      	movs	r1, #0
 8001a44:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2220      	movs	r2, #32
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d1d7      	bne.n	8001a0a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2220      	movs	r2, #32
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d004      	beq.n	8001a72 <I2C_IsErrorOccurred+0x12a>
 8001a68:	2327      	movs	r3, #39	; 0x27
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d086      	beq.n	8001980 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a72:	2327      	movs	r3, #39	; 0x27
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a8c:	2327      	movs	r3, #39	; 0x27
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d00c      	beq.n	8001ac0 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	0052      	lsls	r2, r2, #1
 8001ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ab8:	2327      	movs	r3, #39	; 0x27
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d00c      	beq.n	8001ae4 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2208      	movs	r2, #8
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	00d2      	lsls	r2, r2, #3
 8001ada:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001adc:	2327      	movs	r3, #39	; 0x27
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d00c      	beq.n	8001b08 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4313      	orrs	r3, r2
 8001af4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b00:	2327      	movs	r3, #39	; 0x27
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001b08:	2327      	movs	r3, #39	; 0x27
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01d      	beq.n	8001b4e <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fe3b 	bl	8001790 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	490d      	ldr	r1, [pc, #52]	; (8001b5c <I2C_IsErrorOccurred+0x214>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2241      	movs	r2, #65	; 0x41
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2242      	movs	r2, #66	; 0x42
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001b4e:	2327      	movs	r3, #39	; 0x27
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	781b      	ldrb	r3, [r3, #0]
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b00b      	add	sp, #44	; 0x2c
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	fe00e800 	.word	0xfe00e800

08001b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	0008      	movs	r0, r1
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	240a      	movs	r4, #10
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	1c02      	adds	r2, r0, #0
 8001b74:	801a      	strh	r2, [r3, #0]
 8001b76:	2009      	movs	r0, #9
 8001b78:	183b      	adds	r3, r7, r0
 8001b7a:	1c0a      	adds	r2, r1, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	059b      	lsls	r3, r3, #22
 8001b84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b86:	183b      	adds	r3, r7, r0
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0419      	lsls	r1, r3, #16
 8001b8c:	23ff      	movs	r3, #255	; 0xff
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001baa:	0d51      	lsrs	r1, r2, #21
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	00d2      	lsls	r2, r2, #3
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <I2C_TransferConfig+0x70>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	43d2      	mvns	r2, r2
 8001bb8:	401a      	ands	r2, r3
 8001bba:	0011      	movs	r1, r2
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b007      	add	sp, #28
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	03ff63ff 	.word	0x03ff63ff

08001bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2241      	movs	r2, #65	; 0x41
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d138      	bne.n	8001c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	5c9b      	ldrb	r3, [r3, r2]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e032      	b.n	8001c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2241      	movs	r2, #65	; 0x41
 8001c04:	2124      	movs	r1, #36	; 0x24
 8001c06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	438a      	bics	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4911      	ldr	r1, [pc, #68]	; (8001c68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2101      	movs	r1, #1
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2241      	movs	r2, #65	; 0x41
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e000      	b.n	8001c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c5c:	2302      	movs	r3, #2
  }
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	ffffefff 	.word	0xffffefff

08001c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2241      	movs	r2, #65	; 0x41
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d139      	bne.n	8001cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	5c9b      	ldrb	r3, [r3, r2]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e033      	b.n	8001cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	2101      	movs	r1, #1
 8001c96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2241      	movs	r2, #65	; 0x41
 8001c9c:	2124      	movs	r1, #36	; 0x24
 8001c9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2101      	movs	r1, #1
 8001cac:	438a      	bics	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	2100      	movs	r1, #0
 8001cf0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
  }
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b004      	add	sp, #16
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	fffff0ff 	.word	0xfffff0ff

08001d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d11f      	bne.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	189b      	adds	r3, r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4912      	ldr	r1, [pc, #72]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7fe f9e2 	bl	8000100 <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d42:	e008      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e001      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e009      	b.n	8001d6a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d0ed      	beq.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b004      	add	sp, #16
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	40007000 	.word	0x40007000
 8001d78:	fffff9ff 	.word	0xfffff9ff
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	000f4240 	.word	0x000f4240

08001d84 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	23e0      	movs	r3, #224	; 0xe0
 8001d8e:	01db      	lsls	r3, r3, #7
 8001d90:	4013      	ands	r3, r2
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e2f3      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d100      	bne.n	8001dba <HAL_RCC_OscConfig+0x1e>
 8001db8:	e07c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dba:	4bc3      	ldr	r3, [pc, #780]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2238      	movs	r2, #56	; 0x38
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc4:	4bc0      	ldr	r3, [pc, #768]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_OscConfig+0x3e>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4bb9      	ldr	r3, [pc, #740]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d062      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x116>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d15e      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e2ce      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	025b      	lsls	r3, r3, #9
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x78>
 8001e04:	4bb0      	ldr	r3, [pc, #704]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4baf      	ldr	r3, [pc, #700]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0249      	lsls	r1, r1, #9
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e020      	b.n	8001e56 <HAL_RCC_OscConfig+0xba>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	23a0      	movs	r3, #160	; 0xa0
 8001e1a:	02db      	lsls	r3, r3, #11
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d10e      	bne.n	8001e3e <HAL_RCC_OscConfig+0xa2>
 8001e20:	4ba9      	ldr	r3, [pc, #676]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4ba8      	ldr	r3, [pc, #672]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	02c9      	lsls	r1, r1, #11
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	4ba6      	ldr	r3, [pc, #664]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4ba5      	ldr	r3, [pc, #660]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0249      	lsls	r1, r1, #9
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0xba>
 8001e3e:	4ba2      	ldr	r3, [pc, #648]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4ba1      	ldr	r3, [pc, #644]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e44:	49a1      	ldr	r1, [pc, #644]	; (80020cc <HAL_RCC_OscConfig+0x330>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	4b9f      	ldr	r3, [pc, #636]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e50:	499f      	ldr	r1, [pc, #636]	; (80020d0 <HAL_RCC_OscConfig+0x334>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d014      	beq.n	8001e88 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fe65 	bl	8000b2c <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7fe fe60 	bl	8000b2c <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e28d      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	4b93      	ldr	r3, [pc, #588]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0xcc>
 8001e86:	e015      	b.n	8001eb4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe fe50 	bl	8000b2c <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e92:	f7fe fe4b 	bl	8000b2c <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e278      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ea4:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	4013      	ands	r3, r2
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0xf6>
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d100      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x124>
 8001ebe:	e099      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec0:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2238      	movs	r2, #56	; 0x38
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x144>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d002      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d135      	bne.n	8001f52 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee6:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x162>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e24b      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a74      	ldr	r2, [pc, #464]	; (80020d4 <HAL_RCC_OscConfig+0x338>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	4b6e      	ldr	r3, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f1a:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x33c>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f2e:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0adb      	lsrs	r3, r3, #11
 8001f34:	2207      	movs	r2, #7
 8001f36:	4013      	ands	r3, r2
 8001f38:	4a68      	ldr	r2, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x340>)
 8001f3a:	40da      	lsrs	r2, r3
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x344>)
 8001f3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x348>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe fd0f 	bl	8000968 <HAL_InitTick>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d051      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e221      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d030      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <HAL_RCC_OscConfig+0x33c>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0049      	lsls	r1, r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fdd6 	bl	8000b2c <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7fe fdd1 	bl	8000b2c <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1fe      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b48      	ldr	r3, [pc, #288]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	; (80020d4 <HAL_RCC_OscConfig+0x338>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	021a      	lsls	r2, r3, #8
 8001fb4:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	4949      	ldr	r1, [pc, #292]	; (80020e8 <HAL_RCC_OscConfig+0x34c>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fdb0 	bl	8000b2c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fdab 	bl	8000b2c <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1d8      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x236>
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d047      	beq.n	800208e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2238      	movs	r2, #56	; 0x38
 8002004:	4013      	ands	r3, r2
 8002006:	2b18      	cmp	r3, #24
 8002008:	d10a      	bne.n	8002020 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d03c      	beq.n	800208e <HAL_RCC_OscConfig+0x2f2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d138      	bne.n	800208e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e1ba      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d019      	beq.n	800205c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 800202a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe fd7a 	bl	8000b2c <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe fd75 	bl	8000b2c <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1a2      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d0f1      	beq.n	800203e <HAL_RCC_OscConfig+0x2a2>
 800205a:	e018      	b.n	800208e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 800205e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8002062:	2101      	movs	r1, #1
 8002064:	438a      	bics	r2, r1
 8002066:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fd60 	bl	8000b2c <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe fd5b 	bl	8000b2c <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e188      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 8002086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d1f1      	bne.n	8002072 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d100      	bne.n	800209a <HAL_RCC_OscConfig+0x2fe>
 8002098:	e0c6      	b.n	8002228 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209a:	231f      	movs	r3, #31
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2238      	movs	r2, #56	; 0x38
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d11e      	bne.n	80020ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x32c>)
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_RCC_OscConfig+0x31e>
 80020b8:	e0b6      	b.n	8002228 <HAL_RCC_OscConfig+0x48c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d000      	beq.n	80020c4 <HAL_RCC_OscConfig+0x328>
 80020c2:	e0b1      	b.n	8002228 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e166      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	fffeffff 	.word	0xfffeffff
 80020d0:	fffbffff 	.word	0xfffbffff
 80020d4:	ffff80ff 	.word	0xffff80ff
 80020d8:	ffffc7ff 	.word	0xffffc7ff
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004
 80020e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ec:	4bac      	ldr	r3, [pc, #688]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80020ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	055b      	lsls	r3, r3, #21
 80020f4:	4013      	ands	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x362>
 80020fc:	2300      	movs	r3, #0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4ba7      	ldr	r3, [pc, #668]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002106:	4ba6      	ldr	r3, [pc, #664]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0549      	lsls	r1, r1, #21
 800210c:	430a      	orrs	r2, r1
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002110:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	055b      	lsls	r3, r3, #21
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800211e:	231f      	movs	r3, #31
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002126:	4b9f      	ldr	r3, [pc, #636]	; (80023a4 <HAL_RCC_OscConfig+0x608>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d11a      	bne.n	8002168 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002132:	4b9c      	ldr	r3, [pc, #624]	; (80023a4 <HAL_RCC_OscConfig+0x608>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b9b      	ldr	r3, [pc, #620]	; (80023a4 <HAL_RCC_OscConfig+0x608>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0049      	lsls	r1, r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002140:	f7fe fcf4 	bl	8000b2c <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe fcef 	bl	8000b2c <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e11c      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215c:	4b91      	ldr	r3, [pc, #580]	; (80023a4 <HAL_RCC_OscConfig+0x608>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x3e2>
 8002170:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002174:	4b8a      	ldr	r3, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002176:	2101      	movs	r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
 800217c:	e01c      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x404>
 8002186:	4b86      	ldr	r3, [pc, #536]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800218a:	4b85      	ldr	r3, [pc, #532]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800218c:	2104      	movs	r1, #4
 800218e:	430a      	orrs	r2, r1
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c
 8002192:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002194:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002198:	2101      	movs	r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	65da      	str	r2, [r3, #92]	; 0x5c
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
 80021a0:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80021a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a4:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	438a      	bics	r2, r1
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ac:	4b7c      	ldr	r3, [pc, #496]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80021ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021b0:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80021b2:	2104      	movs	r1, #4
 80021b4:	438a      	bics	r2, r1
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fcb4 	bl	8000b2c <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c8:	e009      	b.n	80021de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fcaf 	bl	8000b2c <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a74      	ldr	r2, [pc, #464]	; (80023a8 <HAL_RCC_OscConfig+0x60c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0db      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021de:	4b70      	ldr	r3, [pc, #448]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x42e>
 80021e8:	e013      	b.n	8002212 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe fc9f 	bl	8000b2c <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f2:	e009      	b.n	8002208 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fc9a 	bl	8000b2c <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	4a6a      	ldr	r2, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x60c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0c6      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002208:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	2202      	movs	r2, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002212:	231f      	movs	r3, #31
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d105      	bne.n	8002228 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800221c:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800221e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002220:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002222:	4962      	ldr	r1, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x610>)
 8002224:	400a      	ands	r2, r1
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d100      	bne.n	8002232 <HAL_RCC_OscConfig+0x496>
 8002230:	e0b0      	b.n	8002394 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002232:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2238      	movs	r2, #56	; 0x38
 8002238:	4013      	ands	r3, r2
 800223a:	2b10      	cmp	r3, #16
 800223c:	d100      	bne.n	8002240 <HAL_RCC_OscConfig+0x4a4>
 800223e:	e078      	b.n	8002332 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d153      	bne.n	80022f0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800224e:	4958      	ldr	r1, [pc, #352]	; (80023b0 <HAL_RCC_OscConfig+0x614>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fc6a 	bl	8000b2c <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fc65 	bl	8000b2c <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e092      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	049b      	lsls	r3, r3, #18
 8002278:	4013      	ands	r3, r2
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b48      	ldr	r3, [pc, #288]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x618>)
 8002282:	4013      	ands	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	431a      	orrs	r2, r3
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	0449      	lsls	r1, r1, #17
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022b8:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	0549      	lsls	r1, r1, #21
 80022c2:	430a      	orrs	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fc31 	bl	8000b2c <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fc2c 	bl	8000b2c <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e059      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	049b      	lsls	r3, r3, #18
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x534>
 80022ee:	e051      	b.n	8002394 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 80022f6:	492e      	ldr	r1, [pc, #184]	; (80023b0 <HAL_RCC_OscConfig+0x614>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc16 	bl	8000b2c <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fc11 	bl	8000b2c <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e03e      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	049b      	lsls	r3, r3, #18
 8002320:	4013      	ands	r3, r2
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 800232a:	4923      	ldr	r1, [pc, #140]	; (80023b8 <HAL_RCC_OscConfig+0x61c>)
 800232c:	400a      	ands	r2, r1
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	e030      	b.n	8002394 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02b      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_RCC_OscConfig+0x604>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2203      	movs	r2, #3
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	429a      	cmp	r2, r3
 8002350:	d11e      	bne.n	8002390 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2270      	movs	r2, #112	; 0x70
 8002356:	401a      	ands	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d117      	bne.n	8002390 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	23fe      	movs	r3, #254	; 0xfe
 8002364:	01db      	lsls	r3, r3, #7
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d10e      	bne.n	8002390 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	23f8      	movs	r3, #248	; 0xf8
 8002376:	039b      	lsls	r3, r3, #14
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	0f5b      	lsrs	r3, r3, #29
 8002386:	075a      	lsls	r2, r3, #29
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b008      	add	sp, #32
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
 80023a8:	00001388 	.word	0x00001388
 80023ac:	efffffff 	.word	0xefffffff
 80023b0:	feffffff 	.word	0xfeffffff
 80023b4:	1fc1808c 	.word	0x1fc1808c
 80023b8:	effefffc 	.word	0xeffefffc

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0e9      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2207      	movs	r2, #7
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d91e      	bls.n	800241c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4393      	bics	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	4b70      	ldr	r3, [pc, #448]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fb9c 	bl	8000b2c <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fb97 	bl	8000b2c <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0ca      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800240e:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2207      	movs	r2, #7
 8002414:	4013      	ands	r3, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d015      	beq.n	8002452 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2204      	movs	r2, #4
 800242c:	4013      	ands	r3, r2
 800242e:	d006      	beq.n	800243e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002430:	4b60      	ldr	r3, [pc, #384]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002436:	21e0      	movs	r1, #224	; 0xe0
 8002438:	01c9      	lsls	r1, r1, #7
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a5d      	ldr	r2, [pc, #372]	; (80025b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	d057      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	4013      	ands	r3, r2
 800246e:	d12b      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e097      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247c:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	049b      	lsls	r3, r3, #18
 8002484:	4013      	ands	r3, r2
 8002486:	d11f      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e08b      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002494:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4013      	ands	r3, r2
 800249e:	d113      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e07f      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	2202      	movs	r2, #2
 80024b2:	4013      	ands	r3, r2
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e074      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ba:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2202      	movs	r2, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e06d      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2207      	movs	r2, #7
 80024ce:	4393      	bics	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024dc:	f7fe fb26 	bl	8000b2c <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e4:	e009      	b.n	80024fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e6:	f7fe fb21 	bl	8000b2c <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a2f      	ldr	r2, [pc, #188]	; (80025b0 <HAL_RCC_ClockConfig+0x1f4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e054      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2238      	movs	r2, #56	; 0x38
 8002500:	401a      	ands	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	429a      	cmp	r2, r3
 800250a:	d1ec      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2207      	movs	r2, #7
 8002512:	4013      	ands	r3, r2
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d21e      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2207      	movs	r2, #7
 8002520:	4393      	bics	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800252c:	f7fe fafe 	bl	8000b2c <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002534:	e009      	b.n	800254a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002536:	f7fe faf9 	bl	8000b2c <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e02c      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2207      	movs	r2, #7
 8002550:	4013      	ands	r3, r2
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2204      	movs	r2, #4
 800255e:	4013      	ands	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_RCC_ClockConfig+0x200>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002576:	f000 f829 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800257a:	0001      	movs	r1, r0
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	220f      	movs	r2, #15
 8002584:	401a      	ands	r2, r3
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_RCC_ClockConfig+0x204>)
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	58d3      	ldr	r3, [r2, r3]
 800258c:	221f      	movs	r2, #31
 800258e:	4013      	ands	r3, r2
 8002590:	000a      	movs	r2, r1
 8002592:	40da      	lsrs	r2, r3
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x208>)
 8002596:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x20c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe f9e3 	bl	8000968 <HAL_InitTick>
 80025a2:	0003      	movs	r3, r0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b004      	add	sp, #16
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40022000 	.word	0x40022000
 80025b0:	00001388 	.word	0x00001388
 80025b4:	40021000 	.word	0x40021000
 80025b8:	fffff0ff 	.word	0xfffff0ff
 80025bc:	ffff8fff 	.word	0xffff8fff
 80025c0:	08003e5c 	.word	0x08003e5c
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2238      	movs	r2, #56	; 0x38
 80025d8:	4013      	ands	r3, r2
 80025da:	d10f      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025dc:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0adb      	lsrs	r3, r3, #11
 80025e2:	2207      	movs	r2, #7
 80025e4:	4013      	ands	r3, r2
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	0013      	movs	r3, r2
 80025ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	4835      	ldr	r0, [pc, #212]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025f2:	f7fd fd85 	bl	8000100 <__udivsi3>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e05d      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2238      	movs	r2, #56	; 0x38
 8002602:	4013      	ands	r3, r2
 8002604:	2b08      	cmp	r3, #8
 8002606:	d102      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002608:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_RCC_GetSysClockFreq+0x100>)
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e054      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2238      	movs	r2, #56	; 0x38
 8002614:	4013      	ands	r3, r2
 8002616:	2b10      	cmp	r3, #16
 8002618:	d138      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2203      	movs	r2, #3
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	2207      	movs	r2, #7
 800262c:	4013      	ands	r3, r2
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d10d      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	4824      	ldr	r0, [pc, #144]	; (80026cc <HAL_RCC_GetSysClockFreq+0x100>)
 800263c:	f7fd fd60 	bl	8000100 <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	0019      	movs	r1, r3
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	227f      	movs	r2, #127	; 0x7f
 800264c:	4013      	ands	r3, r2
 800264e:	434b      	muls	r3, r1
 8002650:	617b      	str	r3, [r7, #20]
        break;
 8002652:	e00d      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	481c      	ldr	r0, [pc, #112]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002658:	f7fd fd52 	bl	8000100 <__udivsi3>
 800265c:	0003      	movs	r3, r0
 800265e:	0019      	movs	r1, r3
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	227f      	movs	r2, #127	; 0x7f
 8002668:	4013      	ands	r3, r2
 800266a:	434b      	muls	r3, r1
 800266c:	617b      	str	r3, [r7, #20]
        break;
 800266e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0f5b      	lsrs	r3, r3, #29
 8002676:	2207      	movs	r2, #7
 8002678:	4013      	ands	r3, r2
 800267a:	3301      	adds	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f7fd fd3d 	bl	8000100 <__udivsi3>
 8002686:	0003      	movs	r3, r0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e015      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2238      	movs	r2, #56	; 0x38
 8002692:	4013      	ands	r3, r2
 8002694:	2b20      	cmp	r3, #32
 8002696:	d103      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2238      	movs	r2, #56	; 0x38
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b18      	cmp	r3, #24
 80026aa:	d103      	bne.n	80026b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026ac:	23fa      	movs	r3, #250	; 0xfa
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e001      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026b8:	693b      	ldr	r3, [r7, #16]
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b006      	add	sp, #24
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	40021000 	.word	0x40021000
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	20000000 	.word	0x20000000

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026e8:	f7ff fff2 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026ec:	0004      	movs	r4, r0
 80026ee:	f7ff fb49 	bl	8001d84 <LL_RCC_GetAPB1Prescaler>
 80026f2:	0003      	movs	r3, r0
 80026f4:	0b1a      	lsrs	r2, r3, #12
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	58d3      	ldr	r3, [r2, r3]
 80026fc:	221f      	movs	r2, #31
 80026fe:	4013      	ands	r3, r2
 8002700:	40dc      	lsrs	r4, r3
 8002702:	0023      	movs	r3, r4
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	08003e9c 	.word	0x08003e9c

08002710 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_RCC_GetClockConfig+0x4c>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2207      	movs	r2, #7
 8002726:	401a      	ands	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetClockConfig+0x4c>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	23f0      	movs	r3, #240	; 0xf0
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_GetClockConfig+0x4c>)
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	23e0      	movs	r3, #224	; 0xe0
 8002740:	01db      	lsls	r3, r3, #7
 8002742:	401a      	ands	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetClockConfig+0x50>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2207      	movs	r2, #7
 800274e:	401a      	ands	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	40022000 	.word	0x40022000

08002764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800276c:	2313      	movs	r3, #19
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002774:	2312      	movs	r3, #18
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002788:	e0a3      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2011      	movs	r0, #17
 800278c:	183b      	adds	r3, r7, r0
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b86      	ldr	r3, [pc, #536]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	055b      	lsls	r3, r3, #21
 800279a:	4013      	ands	r3, r2
 800279c:	d110      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b83      	ldr	r3, [pc, #524]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	0549      	lsls	r1, r1, #21
 80027a8:	430a      	orrs	r2, r1
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80027ac:	4b7f      	ldr	r3, [pc, #508]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	055b      	lsls	r3, r3, #21
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	183b      	adds	r3, r7, r0
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c0:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b7a      	ldr	r3, [pc, #488]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	0049      	lsls	r1, r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ce:	f7fe f9ad 	bl	8000b2c <HAL_GetTick>
 80027d2:	0003      	movs	r3, r0
 80027d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d6:	e00b      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d8:	f7fe f9a8 	bl	8000b2c <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d904      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027e6:	2313      	movs	r3, #19
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2203      	movs	r2, #3
 80027ec:	701a      	strb	r2, [r3, #0]
        break;
 80027ee:	e005      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0ed      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027fc:	2313      	movs	r3, #19
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d154      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002806:	4b69      	ldr	r3, [pc, #420]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4013      	ands	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d019      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	429a      	cmp	r2, r3
 8002820:	d014      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002822:	4b62      	ldr	r3, [pc, #392]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	4a63      	ldr	r2, [pc, #396]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002828:	4013      	ands	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800282c:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800282e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002830:	4b5e      	ldr	r3, [pc, #376]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0249      	lsls	r1, r1, #9
 8002836:	430a      	orrs	r2, r1
 8002838:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800283c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002840:	495d      	ldr	r1, [pc, #372]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002842:	400a      	ands	r2, r1
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002846:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2201      	movs	r2, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d016      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe f96a 	bl	8000b2c <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285c:	e00c      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe f965 	bl	8000b2c <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4a54      	ldr	r2, [pc, #336]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d904      	bls.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800286e:	2313      	movs	r3, #19
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	2203      	movs	r2, #3
 8002874:	701a      	strb	r2, [r3, #0]
            break;
 8002876:	e004      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2202      	movs	r2, #2
 800287e:	4013      	ands	r3, r2
 8002880:	d0ed      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002882:	2313      	movs	r3, #19
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800289c:	430a      	orrs	r2, r1
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
 80028a0:	e00c      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028a2:	2312      	movs	r3, #18
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	2213      	movs	r2, #19
 80028a8:	18ba      	adds	r2, r7, r2
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e005      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	2312      	movs	r3, #18
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2213      	movs	r2, #19
 80028b6:	18ba      	adds	r2, r7, r2
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028bc:	2311      	movs	r3, #17
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028cc:	493c      	ldr	r1, [pc, #240]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	2203      	movs	r2, #3
 80028e2:	4393      	bics	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	4013      	ands	r3, r2
 80028f8:	d009      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028fa:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	220c      	movs	r2, #12
 8002900:	4393      	bics	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800290a:	430a      	orrs	r2, r1
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2220      	movs	r2, #32
 8002914:	4013      	ands	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002928:	430a      	orrs	r2, r1
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	01db      	lsls	r3, r3, #7
 8002934:	4013      	ands	r3, r2
 8002936:	d015      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	0899      	lsrs	r1, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002946:	430a      	orrs	r2, r1
 8002948:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	429a      	cmp	r2, r3
 8002954:	d106      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0249      	lsls	r1, r1, #9
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4013      	ands	r3, r2
 800296e:	d016      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002976:	4013      	ands	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002980:	430a      	orrs	r2, r1
 8002982:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	01db      	lsls	r3, r3, #7
 800298c:	429a      	cmp	r2, r3
 800298e:	d106      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	430a      	orrs	r2, r1
 800299c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800299e:	2312      	movs	r3, #18
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	781b      	ldrb	r3, [r3, #0]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b006      	add	sp, #24
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
 80029b4:	fffffcff 	.word	0xfffffcff
 80029b8:	fffeffff 	.word	0xfffeffff
 80029bc:	00001388 	.word	0x00001388
 80029c0:	efffffff 	.word	0xefffffff
 80029c4:	ffffcfff 	.word	0xffffcfff
 80029c8:	ffff3fff 	.word	0xffff3fff

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04a      	b.n	8002a74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	; 0x3d
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223c      	movs	r2, #60	; 0x3c
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f841 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223d      	movs	r2, #61	; 0x3d
 80029fe:	2102      	movs	r1, #2
 8002a00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f000 f9e5 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2248      	movs	r2, #72	; 0x48
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223e      	movs	r2, #62	; 0x3e
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223f      	movs	r2, #63	; 0x3f
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2241      	movs	r2, #65	; 0x41
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2242      	movs	r2, #66	; 0x42
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2243      	movs	r2, #67	; 0x43
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2244      	movs	r2, #68	; 0x44
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2245      	movs	r2, #69	; 0x45
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2246      	movs	r2, #70	; 0x46
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2247      	movs	r2, #71	; 0x47
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	; 0x3d
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	; 0x3d
 8002a98:	5c9b      	ldrb	r3, [r3, r2]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e03c      	b.n	8002b1e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	223d      	movs	r2, #61	; 0x3d
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x4e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x4e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d116      	bne.n	8002b08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_TIM_Base_Start_IT+0xa8>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d016      	beq.n	8002b1a <HAL_TIM_Base_Start_IT+0x8e>
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	025b      	lsls	r3, r3, #9
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d011      	beq.n	8002b1a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	e008      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2101      	movs	r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e000      	b.n	8002b1c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	00010007 	.word	0x00010007

08002b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d124      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d11d      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2203      	movs	r2, #3
 8002b62:	4252      	negs	r2, r2
 8002b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2203      	movs	r2, #3
 8002b74:	4013      	ands	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 f916 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002b80:	e007      	b.n	8002b92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 f909 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 f915 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d125      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2204      	movs	r2, #4
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	4252      	negs	r2, r2
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	23c0      	movs	r3, #192	; 0xc0
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 f8e9 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002bda:	e007      	b.n	8002bec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f8dc 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8e8 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d124      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2208      	movs	r2, #8
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d11d      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2209      	movs	r2, #9
 8002c14:	4252      	negs	r2, r2
 8002c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2203      	movs	r2, #3
 8002c26:	4013      	ands	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 f8bd 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002c32:	e007      	b.n	8002c44 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f8b0 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f8bc 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2210      	movs	r2, #16
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d125      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d11e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2211      	movs	r2, #17
 8002c6c:	4252      	negs	r2, r2
 8002c6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2208      	movs	r2, #8
 8002c74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	23c0      	movs	r3, #192	; 0xc0
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f890 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e007      	b.n	8002c9e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 f883 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f88f 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d108      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	4252      	negs	r2, r2
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fd fd49 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d10f      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b80      	cmp	r3, #128	; 0x80
 8002cec:	d108      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2281      	movs	r2, #129	; 0x81
 8002cf4:	4252      	negs	r2, r2
 8002cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f8ec 	bl	8002ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d10e      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d107      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_TIM_IRQHandler+0x260>)
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f8db 	bl	8002ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d10f      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d108      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2241      	movs	r2, #65	; 0x41
 8002d54:	4252      	negs	r2, r2
 8002d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f836 	bl	8002dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2220      	movs	r2, #32
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d10f      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d108      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2221      	movs	r2, #33	; 0x21
 8002d82:	4252      	negs	r2, r2
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f89d 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	fffffeff 	.word	0xfffffeff

08002d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2f      	ldr	r2, [pc, #188]	; (8002eac <TIM_Base_SetConfig+0xd0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x20>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <TIM_Base_SetConfig+0xd4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2270      	movs	r2, #112	; 0x70
 8002e00:	4393      	bics	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <TIM_Base_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <TIM_Base_SetConfig+0xd4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00f      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <TIM_Base_SetConfig+0xd8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <TIM_Base_SetConfig+0xdc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <TIM_Base_SetConfig+0xe0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <TIM_Base_SetConfig+0xe4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <TIM_Base_SetConfig+0xe8>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	4393      	bics	r3, r2
 8002e56:	001a      	movs	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <TIM_Base_SetConfig+0xd0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0xba>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <TIM_Base_SetConfig+0xdc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0xba>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <TIM_Base_SetConfig+0xe0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0xba>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <TIM_Base_SetConfig+0xe4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d103      	bne.n	8002e9e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	615a      	str	r2, [r3, #20]
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40002000 	.word	0x40002000
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40014800 	.word	0x40014800
 8002ec4:	fffffcff 	.word	0xfffffcff

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e046      	b.n	8002f98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2284      	movs	r2, #132	; 0x84
 8002f0e:	589b      	ldr	r3, [r3, r2]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7fd fcc2 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2284      	movs	r2, #132	; 0x84
 8002f28:	2124      	movs	r1, #36	; 0x24
 8002f2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f830 	bl	8002fa4 <UART_SetConfig>
 8002f44:	0003      	movs	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e024      	b.n	8002f98 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f9c7 	bl	80032ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <HAL_UART_Init+0xa8>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	212a      	movs	r1, #42	; 0x2a
 8002f7a:	438a      	bics	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 fa5f 	bl	8003454 <UART_CheckIdleState>
 8002f96:	0003      	movs	r3, r0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	ffffb7ff 	.word	0xffffb7ff

08002fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fac:	231a      	movs	r3, #26
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4abc      	ldr	r2, [pc, #752]	; (80032c4 <UART_SetConfig+0x320>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4ab7      	ldr	r2, [pc, #732]	; (80032c8 <UART_SetConfig+0x324>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	4313      	orrs	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4aae      	ldr	r2, [pc, #696]	; (80032cc <UART_SetConfig+0x328>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	220f      	movs	r2, #15
 8003028:	4393      	bics	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4aa4      	ldr	r2, [pc, #656]	; (80032d0 <UART_SetConfig+0x32c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d127      	bne.n	8003092 <UART_SetConfig+0xee>
 8003042:	4ba4      	ldr	r3, [pc, #656]	; (80032d4 <UART_SetConfig+0x330>)
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	2203      	movs	r2, #3
 8003048:	4013      	ands	r3, r2
 800304a:	2b03      	cmp	r3, #3
 800304c:	d017      	beq.n	800307e <UART_SetConfig+0xda>
 800304e:	d81b      	bhi.n	8003088 <UART_SetConfig+0xe4>
 8003050:	2b02      	cmp	r3, #2
 8003052:	d00a      	beq.n	800306a <UART_SetConfig+0xc6>
 8003054:	d818      	bhi.n	8003088 <UART_SetConfig+0xe4>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <UART_SetConfig+0xbc>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d00a      	beq.n	8003074 <UART_SetConfig+0xd0>
 800305e:	e013      	b.n	8003088 <UART_SetConfig+0xe4>
 8003060:	231b      	movs	r3, #27
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e058      	b.n	800311c <UART_SetConfig+0x178>
 800306a:	231b      	movs	r3, #27
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e053      	b.n	800311c <UART_SetConfig+0x178>
 8003074:	231b      	movs	r3, #27
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2204      	movs	r2, #4
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e04e      	b.n	800311c <UART_SetConfig+0x178>
 800307e:	231b      	movs	r3, #27
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	2208      	movs	r2, #8
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e049      	b.n	800311c <UART_SetConfig+0x178>
 8003088:	231b      	movs	r3, #27
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2210      	movs	r2, #16
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e044      	b.n	800311c <UART_SetConfig+0x178>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a90      	ldr	r2, [pc, #576]	; (80032d8 <UART_SetConfig+0x334>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d127      	bne.n	80030ec <UART_SetConfig+0x148>
 800309c:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <UART_SetConfig+0x330>)
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	220c      	movs	r2, #12
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d017      	beq.n	80030d8 <UART_SetConfig+0x134>
 80030a8:	d81b      	bhi.n	80030e2 <UART_SetConfig+0x13e>
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d00a      	beq.n	80030c4 <UART_SetConfig+0x120>
 80030ae:	d818      	bhi.n	80030e2 <UART_SetConfig+0x13e>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <UART_SetConfig+0x116>
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d00a      	beq.n	80030ce <UART_SetConfig+0x12a>
 80030b8:	e013      	b.n	80030e2 <UART_SetConfig+0x13e>
 80030ba:	231b      	movs	r3, #27
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e02b      	b.n	800311c <UART_SetConfig+0x178>
 80030c4:	231b      	movs	r3, #27
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2202      	movs	r2, #2
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e026      	b.n	800311c <UART_SetConfig+0x178>
 80030ce:	231b      	movs	r3, #27
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e021      	b.n	800311c <UART_SetConfig+0x178>
 80030d8:	231b      	movs	r3, #27
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2208      	movs	r2, #8
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e01c      	b.n	800311c <UART_SetConfig+0x178>
 80030e2:	231b      	movs	r3, #27
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2210      	movs	r2, #16
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e017      	b.n	800311c <UART_SetConfig+0x178>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7a      	ldr	r2, [pc, #488]	; (80032dc <UART_SetConfig+0x338>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d104      	bne.n	8003100 <UART_SetConfig+0x15c>
 80030f6:	231b      	movs	r3, #27
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e00d      	b.n	800311c <UART_SetConfig+0x178>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a76      	ldr	r2, [pc, #472]	; (80032e0 <UART_SetConfig+0x33c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d104      	bne.n	8003114 <UART_SetConfig+0x170>
 800310a:	231b      	movs	r3, #27
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e003      	b.n	800311c <UART_SetConfig+0x178>
 8003114:	231b      	movs	r3, #27
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2210      	movs	r2, #16
 800311a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	429a      	cmp	r2, r3
 8003126:	d000      	beq.n	800312a <UART_SetConfig+0x186>
 8003128:	e065      	b.n	80031f6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800312a:	231b      	movs	r3, #27
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d015      	beq.n	8003160 <UART_SetConfig+0x1bc>
 8003134:	dc18      	bgt.n	8003168 <UART_SetConfig+0x1c4>
 8003136:	2b04      	cmp	r3, #4
 8003138:	d00d      	beq.n	8003156 <UART_SetConfig+0x1b2>
 800313a:	dc15      	bgt.n	8003168 <UART_SetConfig+0x1c4>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <UART_SetConfig+0x1a2>
 8003140:	2b02      	cmp	r3, #2
 8003142:	d005      	beq.n	8003150 <UART_SetConfig+0x1ac>
 8003144:	e010      	b.n	8003168 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003146:	f7ff facd 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 800314a:	0003      	movs	r3, r0
 800314c:	617b      	str	r3, [r7, #20]
        break;
 800314e:	e012      	b.n	8003176 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <UART_SetConfig+0x340>)
 8003152:	617b      	str	r3, [r7, #20]
        break;
 8003154:	e00f      	b.n	8003176 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7ff fa39 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800315a:	0003      	movs	r3, r0
 800315c:	617b      	str	r3, [r7, #20]
        break;
 800315e:	e00a      	b.n	8003176 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	617b      	str	r3, [r7, #20]
        break;
 8003166:	e006      	b.n	8003176 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800316c:	231a      	movs	r3, #26
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
        break;
 8003174:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d100      	bne.n	800317e <UART_SetConfig+0x1da>
 800317c:	e08d      	b.n	800329a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <UART_SetConfig+0x344>)
 8003184:	0052      	lsls	r2, r2, #1
 8003186:	5ad3      	ldrh	r3, [r2, r3]
 8003188:	0019      	movs	r1, r3
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7fc ffb8 	bl	8000100 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	005a      	lsls	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	18d2      	adds	r2, r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	0019      	movs	r1, r3
 80031a2:	0010      	movs	r0, r2
 80031a4:	f7fc ffac 	bl	8000100 <__udivsi3>
 80031a8:	0003      	movs	r3, r0
 80031aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d91c      	bls.n	80031ec <UART_SetConfig+0x248>
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d217      	bcs.n	80031ec <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	200e      	movs	r0, #14
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	210f      	movs	r1, #15
 80031c6:	438a      	bics	r2, r1
 80031c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2207      	movs	r2, #7
 80031d2:	4013      	ands	r3, r2
 80031d4:	b299      	uxth	r1, r3
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	183a      	adds	r2, r7, r0
 80031da:	8812      	ldrh	r2, [r2, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	183a      	adds	r2, r7, r0
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e056      	b.n	800329a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80031ec:	231a      	movs	r3, #26
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e051      	b.n	800329a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f6:	231b      	movs	r3, #27
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d015      	beq.n	800322c <UART_SetConfig+0x288>
 8003200:	dc18      	bgt.n	8003234 <UART_SetConfig+0x290>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d00d      	beq.n	8003222 <UART_SetConfig+0x27e>
 8003206:	dc15      	bgt.n	8003234 <UART_SetConfig+0x290>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <UART_SetConfig+0x26e>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d005      	beq.n	800321c <UART_SetConfig+0x278>
 8003210:	e010      	b.n	8003234 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003212:	f7ff fa67 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8003216:	0003      	movs	r3, r0
 8003218:	617b      	str	r3, [r7, #20]
        break;
 800321a:	e012      	b.n	8003242 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <UART_SetConfig+0x340>)
 800321e:	617b      	str	r3, [r7, #20]
        break;
 8003220:	e00f      	b.n	8003242 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7ff f9d3 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003226:	0003      	movs	r3, r0
 8003228:	617b      	str	r3, [r7, #20]
        break;
 800322a:	e00a      	b.n	8003242 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	617b      	str	r3, [r7, #20]
        break;
 8003232:	e006      	b.n	8003242 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003238:	231a      	movs	r3, #26
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
        break;
 8003240:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d028      	beq.n	800329a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <UART_SetConfig+0x344>)
 800324e:	0052      	lsls	r2, r2, #1
 8003250:	5ad3      	ldrh	r3, [r2, r3]
 8003252:	0019      	movs	r1, r3
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7fc ff53 	bl	8000100 <__udivsi3>
 800325a:	0003      	movs	r3, r0
 800325c:	001a      	movs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	18d2      	adds	r2, r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0019      	movs	r1, r3
 800326c:	0010      	movs	r0, r2
 800326e:	f7fc ff47 	bl	8000100 <__udivsi3>
 8003272:	0003      	movs	r3, r0
 8003274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b0f      	cmp	r3, #15
 800327a:	d90a      	bls.n	8003292 <UART_SetConfig+0x2ee>
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	025b      	lsls	r3, r3, #9
 8003282:	429a      	cmp	r2, r3
 8003284:	d205      	bcs.n	8003292 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e003      	b.n	800329a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003292:	231a      	movs	r3, #26
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	226a      	movs	r2, #106	; 0x6a
 800329e:	2101      	movs	r1, #1
 80032a0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2268      	movs	r2, #104	; 0x68
 80032a6:	2101      	movs	r1, #1
 80032a8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80032b6:	231a      	movs	r3, #26
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b008      	add	sp, #32
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	cfff69f3 	.word	0xcfff69f3
 80032c8:	ffffcfff 	.word	0xffffcfff
 80032cc:	11fff4ff 	.word	0x11fff4ff
 80032d0:	40013800 	.word	0x40013800
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40004400 	.word	0x40004400
 80032dc:	40004800 	.word	0x40004800
 80032e0:	40004c00 	.word	0x40004c00
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	08003ebc 	.word	0x08003ebc

080032ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	d00b      	beq.n	8003316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <UART_AdvFeatureConfig+0x144>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d00b      	beq.n	8003338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a43      	ldr	r2, [pc, #268]	; (8003434 <UART_AdvFeatureConfig+0x148>)
 8003328:	4013      	ands	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	2204      	movs	r2, #4
 800333e:	4013      	ands	r3, r2
 8003340:	d00b      	beq.n	800335a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a3b      	ldr	r2, [pc, #236]	; (8003438 <UART_AdvFeatureConfig+0x14c>)
 800334a:	4013      	ands	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	2208      	movs	r2, #8
 8003360:	4013      	ands	r3, r2
 8003362:	d00b      	beq.n	800337c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <UART_AdvFeatureConfig+0x150>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	2210      	movs	r2, #16
 8003382:	4013      	ands	r3, r2
 8003384:	d00b      	beq.n	800339e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <UART_AdvFeatureConfig+0x154>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	2220      	movs	r2, #32
 80033a4:	4013      	ands	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a25      	ldr	r2, [pc, #148]	; (8003444 <UART_AdvFeatureConfig+0x158>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4013      	ands	r3, r2
 80033c8:	d01d      	beq.n	8003406 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <UART_AdvFeatureConfig+0x15c>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	035b      	lsls	r3, r3, #13
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10b      	bne.n	8003406 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a15      	ldr	r2, [pc, #84]	; (800344c <UART_AdvFeatureConfig+0x160>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	4013      	ands	r3, r2
 800340e:	d00b      	beq.n	8003428 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <UART_AdvFeatureConfig+0x164>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	fffdffff 	.word	0xfffdffff
 8003434:	fffeffff 	.word	0xfffeffff
 8003438:	fffbffff 	.word	0xfffbffff
 800343c:	ffff7fff 	.word	0xffff7fff
 8003440:	ffffefff 	.word	0xffffefff
 8003444:	ffffdfff 	.word	0xffffdfff
 8003448:	ffefffff 	.word	0xffefffff
 800344c:	ff9fffff 	.word	0xff9fffff
 8003450:	fff7ffff 	.word	0xfff7ffff

08003454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	228c      	movs	r2, #140	; 0x8c
 8003460:	2100      	movs	r1, #0
 8003462:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003464:	f7fd fb62 	bl	8000b2c <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2208      	movs	r2, #8
 8003474:	4013      	ands	r3, r2
 8003476:	2b08      	cmp	r3, #8
 8003478:	d10c      	bne.n	8003494 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	0391      	lsls	r1, r2, #14
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <UART_CheckIdleState+0x90>)
 8003484:	9200      	str	r2, [sp, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	f000 f82e 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d001      	beq.n	8003494 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e023      	b.n	80034dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d10c      	bne.n	80034bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	03d1      	lsls	r1, r2, #15
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <UART_CheckIdleState+0x90>)
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f000 f81a 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 80034b4:	1e03      	subs	r3, r0, #0
 80034b6:	d001      	beq.n	80034bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e00f      	b.n	80034dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2284      	movs	r2, #132	; 0x84
 80034c0:	2120      	movs	r1, #32
 80034c2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2288      	movs	r2, #136	; 0x88
 80034c8:	2120      	movs	r1, #32
 80034ca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	01ffffff 	.word	0x01ffffff

080034e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b094      	sub	sp, #80	; 0x50
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	1dfb      	adds	r3, r7, #7
 80034f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	e0a7      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fc:	3301      	adds	r3, #1
 80034fe:	d100      	bne.n	8003502 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003500:	e0a3      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fd fb13 	bl	8000b2c <HAL_GetTick>
 8003506:	0002      	movs	r2, r0
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <UART_WaitOnFlagUntilTimeout+0x30>
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	2b00      	cmp	r3, #0
 8003516:	d13f      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003518:	f3ef 8310 	mrs	r3, PRIMASK
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
 8003522:	2301      	movs	r3, #1
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	494e      	ldr	r1, [pc, #312]	; (8003674 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800353a:	400a      	ands	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	f383 8810 	msr	PRIMASK, r3
}
 8003548:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	643b      	str	r3, [r7, #64]	; 0x40
 8003554:	2301      	movs	r3, #1
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2284      	movs	r2, #132	; 0x84
 8003580:	2120      	movs	r1, #32
 8003582:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2288      	movs	r2, #136	; 0x88
 8003588:	2120      	movs	r1, #32
 800358a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e069      	b.n	800366c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2204      	movs	r2, #4
 80035a0:	4013      	ands	r3, r2
 80035a2:	d052      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	401a      	ands	r2, r3
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d148      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c2:	f3ef 8310 	mrs	r3, PRIMASK
 80035c6:	613b      	str	r3, [r7, #16]
  return(result);
 80035c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	2301      	movs	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4924      	ldr	r1, [pc, #144]	; (8003674 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f383 8810 	msr	PRIMASK, r3
}
 80035f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f4:	f3ef 8310 	mrs	r3, PRIMASK
 80035f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80035fa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fe:	2301      	movs	r3, #1
 8003600:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f383 8810 	msr	PRIMASK, r3
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	438a      	bics	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2284      	movs	r2, #132	; 0x84
 800362a:	2120      	movs	r1, #32
 800362c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2288      	movs	r2, #136	; 0x88
 8003632:	2120      	movs	r1, #32
 8003634:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	228c      	movs	r2, #140	; 0x8c
 800363a:	2120      	movs	r1, #32
 800363c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e010      	b.n	800366c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	425a      	negs	r2, r3
 800365a:	4153      	adcs	r3, r2
 800365c:	b2db      	uxtb	r3, r3
 800365e:	001a      	movs	r2, r3
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d100      	bne.n	800366a <UART_WaitOnFlagUntilTimeout+0x182>
 8003668:	e747      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b014      	add	sp, #80	; 0x50
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fffffe5f 	.word	0xfffffe5f

08003678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_UARTEx_DisableFifoMode+0x16>
 800368a:	2302      	movs	r3, #2
 800368c:	e027      	b.n	80036de <HAL_UARTEx_DisableFifoMode+0x66>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	2101      	movs	r1, #1
 8003694:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2284      	movs	r2, #132	; 0x84
 800369a:	2124      	movs	r1, #36	; 0x24
 800369c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	438a      	bics	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2284      	movs	r2, #132	; 0x84
 80036d0:	2120      	movs	r1, #32
 80036d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	dfffffff 	.word	0xdfffffff

080036ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	5c9b      	ldrb	r3, [r3, r2]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003700:	2302      	movs	r3, #2
 8003702:	e02e      	b.n	8003762 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	2101      	movs	r1, #1
 800370a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2284      	movs	r2, #132	; 0x84
 8003710:	2124      	movs	r1, #36	; 0x24
 8003712:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2101      	movs	r1, #1
 8003728:	438a      	bics	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	08d9      	lsrs	r1, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 f854 	bl	80037f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2284      	movs	r2, #132	; 0x84
 8003754:	2120      	movs	r1, #32
 8003756:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	2100      	movs	r1, #0
 800375e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	5c9b      	ldrb	r3, [r3, r2]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e02f      	b.n	80037e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	2101      	movs	r1, #1
 800378a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2284      	movs	r2, #132	; 0x84
 8003790:	2124      	movs	r1, #36	; 0x24
 8003792:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	438a      	bics	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 f813 	bl	80037f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2284      	movs	r2, #132	; 0x84
 80037d6:	2120      	movs	r1, #32
 80037d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	f1ffffff 	.word	0xf1ffffff

080037f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	226a      	movs	r2, #106	; 0x6a
 8003804:	2101      	movs	r1, #1
 8003806:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2268      	movs	r2, #104	; 0x68
 800380c:	2101      	movs	r1, #1
 800380e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003810:	e043      	b.n	800389a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003812:	260f      	movs	r6, #15
 8003814:	19bb      	adds	r3, r7, r6
 8003816:	2208      	movs	r2, #8
 8003818:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800381a:	200e      	movs	r0, #14
 800381c:	183b      	adds	r3, r7, r0
 800381e:	2208      	movs	r2, #8
 8003820:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	0e5b      	lsrs	r3, r3, #25
 800382a:	b2da      	uxtb	r2, r3
 800382c:	240d      	movs	r4, #13
 800382e:	193b      	adds	r3, r7, r4
 8003830:	2107      	movs	r1, #7
 8003832:	400a      	ands	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	0f5b      	lsrs	r3, r3, #29
 800383e:	b2da      	uxtb	r2, r3
 8003840:	250c      	movs	r5, #12
 8003842:	197b      	adds	r3, r7, r5
 8003844:	2107      	movs	r1, #7
 8003846:	400a      	ands	r2, r1
 8003848:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800384a:	183b      	adds	r3, r7, r0
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	197a      	adds	r2, r7, r5
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	4914      	ldr	r1, [pc, #80]	; (80038a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003854:	5c8a      	ldrb	r2, [r1, r2]
 8003856:	435a      	muls	r2, r3
 8003858:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800385a:	197b      	adds	r3, r7, r5
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003862:	0019      	movs	r1, r3
 8003864:	f7fc fcd6 	bl	8000214 <__divsi3>
 8003868:	0003      	movs	r3, r0
 800386a:	b299      	uxth	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	226a      	movs	r2, #106	; 0x6a
 8003870:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003872:	19bb      	adds	r3, r7, r6
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	193a      	adds	r2, r7, r4
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800387c:	5c8a      	ldrb	r2, [r1, r2]
 800387e:	435a      	muls	r2, r3
 8003880:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003882:	193b      	adds	r3, r7, r4
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800388a:	0019      	movs	r1, r3
 800388c:	f7fc fcc2 	bl	8000214 <__divsi3>
 8003890:	0003      	movs	r3, r0
 8003892:	b299      	uxth	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2268      	movs	r2, #104	; 0x68
 8003898:	5299      	strh	r1, [r3, r2]
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b005      	add	sp, #20
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	08003ed4 	.word	0x08003ed4
 80038a8:	08003edc 	.word	0x08003edc

080038ac <readDeviceName>:
#include "Gyro_l3g4200.h"
uint8_t readDeviceName(I2C_HandleTypeDef *_hi2c_config)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af04      	add	r7, sp, #16
 80038b2:	6078      	str	r0, [r7, #4]
	uint8_t _pData=0;;
 80038b4:	210f      	movs	r1, #15
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(_hi2c_config,
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	23ff      	movs	r3, #255	; 0xff
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	2301      	movs	r3, #1
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	000c      	movs	r4, r1
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2301      	movs	r3, #1
 80038ce:	220f      	movs	r2, #15
 80038d0:	21d2      	movs	r1, #210	; 0xd2
 80038d2:	f7fd fd63 	bl	800139c <HAL_I2C_Mem_Read>
			DEVICE_NAME,
			I2C_MEMADD_SIZE_8BIT,
			&_pData,
			1,
			0xFF);
	return _pData;
 80038d6:	193b      	adds	r3, r7, r4
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b005      	add	sp, #20
 80038e0:	bd90      	pop	{r4, r7, pc}

080038e2 <readRegister>:

uint8_t readRegister(I2C_HandleTypeDef *_hi2c_config,
						uint8_t regAddr)
{
 80038e2:	b590      	push	{r4, r7, lr}
 80038e4:	b089      	sub	sp, #36	; 0x24
 80038e6:	af04      	add	r7, sp, #16
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	000a      	movs	r2, r1
 80038ec:	1cfb      	adds	r3, r7, #3
 80038ee:	701a      	strb	r2, [r3, #0]
	uint8_t _pdata=0;
 80038f0:	210f      	movs	r1, #15
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(_hi2c_config,
 80038f8:	1cfb      	adds	r3, r7, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	23ff      	movs	r3, #255	; 0xff
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	2301      	movs	r3, #1
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	000c      	movs	r4, r1
 800390a:	187b      	adds	r3, r7, r1
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2301      	movs	r3, #1
 8003910:	21d2      	movs	r1, #210	; 0xd2
 8003912:	f7fd fd43 	bl	800139c <HAL_I2C_Mem_Read>
					regAddr,
					I2C_MEMADD_SIZE_8BIT,
					&_pdata,
					1,
					0xFF);
	return _pdata;
 8003916:	193b      	adds	r3, r7, r4
 8003918:	781b      	ldrb	r3, [r3, #0]
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b005      	add	sp, #20
 8003920:	bd90      	pop	{r4, r7, pc}

08003922 <readControlRegister1>:
 * BW1:0 -> Bandwidth selection
 * PD 0: -> power down mode, 1: normal mode or sleep mode
 * ZEN YEN XEN -> enable XYZ axis
 */
uint8_t readControlRegister1(I2C_HandleTypeDef *_hi2c_config)
{
 8003922:	b590      	push	{r4, r7, lr}
 8003924:	b089      	sub	sp, #36	; 0x24
 8003926:	af04      	add	r7, sp, #16
 8003928:	6078      	str	r0, [r7, #4]
	uint8_t _pData=0;
 800392a:	210f      	movs	r1, #15
 800392c:	187b      	adds	r3, r7, r1
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(_hi2c_config,
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	23ff      	movs	r3, #255	; 0xff
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	2301      	movs	r3, #1
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	000c      	movs	r4, r1
 800393e:	187b      	adds	r3, r7, r1
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2301      	movs	r3, #1
 8003944:	2220      	movs	r2, #32
 8003946:	21d2      	movs	r1, #210	; 0xd2
 8003948:	f7fd fd28 	bl	800139c <HAL_I2C_Mem_Read>
			DEVICE_CTRL_REG_1,
			I2C_MEMADD_SIZE_8BIT,
			&_pData,
			1,
			0xFF);
	return _pData;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	781b      	ldrb	r3, [r3, #0]
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b005      	add	sp, #20
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <readControlRegister5>:
			1,
			0xFF);
	return _pData;
}
uint8_t readControlRegister5(I2C_HandleTypeDef *_hi2c_config)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af04      	add	r7, sp, #16
 800395e:	6078      	str	r0, [r7, #4]
	uint8_t _pData= 0;
 8003960:	210f      	movs	r1, #15
 8003962:	187b      	adds	r3, r7, r1
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(_hi2c_config,
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	23ff      	movs	r3, #255	; 0xff
 800396c:	9302      	str	r3, [sp, #8]
 800396e:	2301      	movs	r3, #1
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	000c      	movs	r4, r1
 8003974:	187b      	adds	r3, r7, r1
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2301      	movs	r3, #1
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	21d2      	movs	r1, #210	; 0xd2
 800397e:	f7fd fd0d 	bl	800139c <HAL_I2C_Mem_Read>
			DEVICE_CTRL_REG_5,
			I2C_MEMADD_SIZE_8BIT,
			&_pData,
			1,
			0xFF);
	return _pData;
 8003982:	193b      	adds	r3, r7, r4
 8003984:	781b      	ldrb	r3, [r3, #0]
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b005      	add	sp, #20
 800398c:	bd90      	pop	{r4, r7, pc}
	...

08003990 <readStatusRegister>:

/**
 * ZYXOR	|	ZOR	|	YOR	|	XOR	|	ZYXDA	|	ZDA	|	YDA	|	XDA	|
 */
uint8_t readStatusRegister(I2C_HandleTypeDef *_hi2c_config)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af04      	add	r7, sp, #16
 8003996:	6078      	str	r0, [r7, #4]
	uint8_t _pData[1]={};
 8003998:	210c      	movs	r1, #12
 800399a:	187b      	adds	r3, r7, r1
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <readStatusRegister+0x38>)
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(_hi2c_config,
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	23ff      	movs	r3, #255	; 0xff
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	2301      	movs	r3, #1
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	000c      	movs	r4, r1
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2301      	movs	r3, #1
 80039b4:	2227      	movs	r2, #39	; 0x27
 80039b6:	21d2      	movs	r1, #210	; 0xd2
 80039b8:	f7fd fcf0 	bl	800139c <HAL_I2C_Mem_Read>
			DEVICE_STATUS_REG,
			I2C_MEMADD_SIZE_8BIT,
			_pData,
			1,
			0xFF);
	return _pData[0];
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b005      	add	sp, #20
 80039c6:	bd90      	pop	{r4, r7, pc}
 80039c8:	08003e58 	.word	0x08003e58

080039cc <setDeviceIntoNormal>:
	readCtrlReg1=readControlRegister1(_hi2c_config);
	return readCtrlReg1;
}

uint8_t setDeviceIntoNormal(I2C_HandleTypeDef *_hi2c_config)
{
 80039cc:	b5b0      	push	{r4, r5, r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af04      	add	r7, sp, #16
 80039d2:	6078      	str	r0, [r7, #4]
	uint8_t readCtrlReg1= 0;
 80039d4:	240f      	movs	r4, #15
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
	uint8_t _pData= 0x0F;
 80039dc:	210e      	movs	r1, #14
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	220f      	movs	r2, #15
 80039e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c_config,
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	23ff      	movs	r3, #255	; 0xff
 80039e8:	9302      	str	r3, [sp, #8]
 80039ea:	2301      	movs	r3, #1
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2301      	movs	r3, #1
 80039f4:	2220      	movs	r2, #32
 80039f6:	21d2      	movs	r1, #210	; 0xd2
 80039f8:	f7fd fba2 	bl	8001140 <HAL_I2C_Mem_Write>
						I2C_MEMADD_SIZE_8BIT,
						&_pData,
						1,
						0xFF);
	//return CTRL_REG_1 after changing mode
	readCtrlReg1=readControlRegister1(_hi2c_config);
 80039fc:	0025      	movs	r5, r4
 80039fe:	193c      	adds	r4, r7, r4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7ff ff8d 	bl	8003922 <readControlRegister1>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	7023      	strb	r3, [r4, #0]
	return readCtrlReg1;
 8003a0c:	197b      	adds	r3, r7, r5
 8003a0e:	781b      	ldrb	r3, [r3, #0]
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bdb0      	pop	{r4, r5, r7, pc}

08003a18 <setFIFOEnable>:
	return _readFifoCtrlReg;
}

//buffer controlling
uint8_t setFIFOEnable(I2C_HandleTypeDef *_hi2c_config)
{
 8003a18:	b5b0      	push	{r4, r5, r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	6078      	str	r0, [r7, #4]
	uint8_t _readCtrlReg5 = readControlRegister5(_hi2c_config);
 8003a20:	250f      	movs	r5, #15
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff ff96 	bl	8003958 <readControlRegister5>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	7023      	strb	r3, [r4, #0]
	uint8_t _sendCtrlReg5 = _readCtrlReg5 | 0x40;
 8003a30:	002c      	movs	r4, r5
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	210e      	movs	r1, #14
 8003a3e:	187b      	adds	r3, r7, r1
 8003a40:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c_config,
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	23ff      	movs	r3, #255	; 0xff
 8003a46:	9302      	str	r3, [sp, #8]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2301      	movs	r3, #1
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	21d2      	movs	r1, #210	; 0xd2
 8003a56:	f7fd fb73 	bl	8001140 <HAL_I2C_Mem_Write>
					DEVICE_CTRL_REG_5,
					I2C_MEMADD_SIZE_8BIT,
					&_sendCtrlReg5,
					1,
					0xFF);
	_readCtrlReg5 = readControlRegister5(_hi2c_config);
 8003a5a:	0025      	movs	r5, r4
 8003a5c:	193c      	adds	r4, r7, r4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff ff79 	bl	8003958 <readControlRegister5>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
	return _readCtrlReg5;
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	781b      	ldrb	r3, [r3, #0]
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a78 <setBuffferMode>:

uint8_t setBuffferMode(enum bufferOperationMode _setBufferMode,
					I2C_HandleTypeDef *_hi2c_config)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af04      	add	r7, sp, #16
 8003a7e:	0002      	movs	r2, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	701a      	strb	r2, [r3, #0]
	uint8_t _setMode=0;
 8003a86:	230e      	movs	r3, #14
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
	uint8_t _readFifoCtrlReg=0;
 8003a8e:	230f      	movs	r3, #15
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
	switch (_setBufferMode)
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d81d      	bhi.n	8003ada <setBuffferMode+0x62>
 8003a9e:	009a      	lsls	r2, r3, #2
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <setBuffferMode+0x9c>)
 8003aa2:	18d3      	adds	r3, r2, r3
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	469f      	mov	pc, r3
	{
	case Buffer_Mode_Bypass:
		_setMode = 0b00011111;
 8003aa8:	230e      	movs	r3, #14
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	221f      	movs	r2, #31
 8003aae:	701a      	strb	r2, [r3, #0]
		break;
 8003ab0:	e013      	b.n	8003ada <setBuffferMode+0x62>
	case Buffer_Mode_FIFO:
		_setMode = 0b00111111;
 8003ab2:	230e      	movs	r3, #14
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	223f      	movs	r2, #63	; 0x3f
 8003ab8:	701a      	strb	r2, [r3, #0]
		break;
 8003aba:	e00e      	b.n	8003ada <setBuffferMode+0x62>
	case Buffer_Mode_Stream:
		_setMode = 0b01011111;
 8003abc:	230e      	movs	r3, #14
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	225f      	movs	r2, #95	; 0x5f
 8003ac2:	701a      	strb	r2, [r3, #0]
		break;
 8003ac4:	e009      	b.n	8003ada <setBuffferMode+0x62>
	case Buffer_Mode_Bypass_2_Stream:
		_setMode = 0b01111111;
 8003ac6:	230e      	movs	r3, #14
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	227f      	movs	r2, #127	; 0x7f
 8003acc:	701a      	strb	r2, [r3, #0]
		break;
 8003ace:	e004      	b.n	8003ada <setBuffferMode+0x62>
	case Stream_2_FIFO:
		_setMode = 0b10011111;
 8003ad0:	230e      	movs	r3, #14
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	229f      	movs	r2, #159	; 0x9f
 8003ad6:	701a      	strb	r2, [r3, #0]
		break;
 8003ad8:	46c0      	nop			; (mov r8, r8)
	}
	HAL_I2C_Mem_Write(_hi2c_config,
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	23ff      	movs	r3, #255	; 0xff
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	230e      	movs	r3, #14
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2301      	movs	r3, #1
 8003aec:	222e      	movs	r2, #46	; 0x2e
 8003aee:	21d2      	movs	r1, #210	; 0xd2
 8003af0:	f7fd fb26 	bl	8001140 <HAL_I2C_Mem_Write>
					DEVICE_FIFO_CTRL_REG,
					I2C_MEMADD_SIZE_8BIT,
					&_setMode,
					1,
					0xFF);
	_readFifoCtrlReg = readRegister(_hi2c_config, DEVICE_FIFO_CTRL_REG);
 8003af4:	250f      	movs	r5, #15
 8003af6:	197c      	adds	r4, r7, r5
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	212e      	movs	r1, #46	; 0x2e
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff fef0 	bl	80038e2 <readRegister>
 8003b02:	0003      	movs	r3, r0
 8003b04:	7023      	strb	r3, [r4, #0]
	return _readFifoCtrlReg;
 8003b06:	197b      	adds	r3, r7, r5
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b004      	add	sp, #16
 8003b10:	bdb0      	pop	{r4, r5, r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	08003ee4 	.word	0x08003ee4

08003b18 <isFIFOstoreFull>:

uint8_t isFIFOstoreFull(I2C_HandleTypeDef *_hi2c_config)
{
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	uint8_t _indicateBit=0;
 8003b20:	250f      	movs	r5, #15
 8003b22:	197b      	adds	r3, r7, r5
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
	uint8_t _readData=0;
 8003b28:	260e      	movs	r6, #14
 8003b2a:	19bb      	adds	r3, r7, r6
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
	_readData=readRegister(_hi2c_config, DEVICE_FIFO_SRC_REG);
 8003b30:	19bc      	adds	r4, r7, r6
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	212f      	movs	r1, #47	; 0x2f
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff fed3 	bl	80038e2 <readRegister>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	7023      	strb	r3, [r4, #0]
	_indicateBit = (_readData & 0b01000000)>>6;
 8003b40:	19bb      	adds	r3, r7, r6
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	119b      	asrs	r3, r3, #6
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	197b      	adds	r3, r7, r5
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]
	return _indicateBit;
 8003b50:	197b      	adds	r3, r7, r5
 8003b52:	781b      	ldrb	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b005      	add	sp, #20
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b5c <isFIFOstoreEmpty>:
uint8_t isFIFOstoreEmpty(I2C_HandleTypeDef *_hi2c_config)
{
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	uint8_t _indicateBit=0;
 8003b64:	250f      	movs	r5, #15
 8003b66:	197b      	adds	r3, r7, r5
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
	uint8_t _readData=0;
 8003b6c:	260e      	movs	r6, #14
 8003b6e:	19bb      	adds	r3, r7, r6
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
	_readData=readRegister(_hi2c_config, DEVICE_FIFO_SRC_REG);
 8003b74:	19bc      	adds	r4, r7, r6
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	212f      	movs	r1, #47	; 0x2f
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff feb1 	bl	80038e2 <readRegister>
 8003b80:	0003      	movs	r3, r0
 8003b82:	7023      	strb	r3, [r4, #0]
	_indicateBit = (_readData & 0b00100000)>>5;
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	115b      	asrs	r3, r3, #5
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	197b      	adds	r3, r7, r5
 8003b8e:	2101      	movs	r1, #1
 8003b90:	400a      	ands	r2, r1
 8003b92:	701a      	strb	r2, [r3, #0]
	return _indicateBit;
 8003b94:	197b      	adds	r3, r7, r5
 8003b96:	781b      	ldrb	r3, [r3, #0]
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b005      	add	sp, #20
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba0 <readOutputTemperature>:
uint8_t readOutputTemperature(I2C_HandleTypeDef *_hi2c_config)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af04      	add	r7, sp, #16
 8003ba6:	6078      	str	r0, [r7, #4]
	uint8_t _pData[1];
	HAL_I2C_Mem_Read(_hi2c_config,
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	23ff      	movs	r3, #255	; 0xff
 8003bac:	9302      	str	r3, [sp, #8]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	240c      	movs	r4, #12
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	2226      	movs	r2, #38	; 0x26
 8003bbc:	21d2      	movs	r1, #210	; 0xd2
 8003bbe:	f7fd fbed 	bl	800139c <HAL_I2C_Mem_Read>
			DEVICE_I2C_ADR,
			DEVICE_OUT_TEMP,
			I2C_MEMADD_SIZE_8BIT,
			_pData, 1,
			0xFF);
	return _pData[0];
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	781b      	ldrb	r3, [r3, #0]
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b005      	add	sp, #20
 8003bcc:	bd90      	pop	{r4, r7, pc}

08003bce <readRollValue>:

//Y axis
int16_t readRollValue(I2C_HandleTypeDef *_hi2c_config)
{
 8003bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	uint8_t _bitDataAvailable=0;
 8003bd6:	240d      	movs	r4, #13
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
	uint8_t _bitDataOverrun=0;
 8003bde:	250c      	movs	r5, #12
 8003be0:	197b      	adds	r3, r7, r5
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	uint8_t _upperData=0;
 8003be6:	260b      	movs	r6, #11
 8003be8:	19bb      	adds	r3, r7, r6
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	uint8_t _lowerData=0;
 8003bee:	230a      	movs	r3, #10
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
	int16_t _rollValue=0;
 8003bf6:	220e      	movs	r2, #14
 8003bf8:	18bb      	adds	r3, r7, r2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
	//check if Y-axis data is available
	_bitDataAvailable = (readStatusRegister(_hi2c_config) & 0x2) >> 1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff fec5 	bl	8003990 <readStatusRegister>
 8003c06:	0003      	movs	r3, r0
 8003c08:	105b      	asrs	r3, r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	193b      	adds	r3, r7, r4
 8003c0e:	2101      	movs	r1, #1
 8003c10:	400a      	ands	r2, r1
 8003c12:	701a      	strb	r2, [r3, #0]
	// check when overrun occurs
	_bitDataOverrun = (readStatusRegister(_hi2c_config) & 0x20) >>5;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7ff feba 	bl	8003990 <readStatusRegister>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	115b      	asrs	r3, r3, #5
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	2101      	movs	r1, #1
 8003c26:	400a      	ands	r2, r1
 8003c28:	701a      	strb	r2, [r3, #0]
	if(_bitDataAvailable == 1 && _bitDataOverrun == 1)
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d11f      	bne.n	8003c72 <readRollValue+0xa4>
 8003c32:	197b      	adds	r3, r7, r5
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d11b      	bne.n	8003c72 <readRollValue+0xa4>
	{
		_upperData = readRegister(_hi2c_config, DEVICE_OUT_Y_H_REG);
 8003c3a:	19bc      	adds	r4, r7, r6
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	212b      	movs	r1, #43	; 0x2b
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7ff fe4e 	bl	80038e2 <readRegister>
 8003c46:	0003      	movs	r3, r0
 8003c48:	7023      	strb	r3, [r4, #0]
		_lowerData = readRegister(_hi2c_config, DEVICE_OUT_Y_L_REG);
 8003c4a:	250a      	movs	r5, #10
 8003c4c:	197c      	adds	r4, r7, r5
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	212a      	movs	r1, #42	; 0x2a
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7ff fe45 	bl	80038e2 <readRegister>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	7023      	strb	r3, [r4, #0]
		//data proccessing
		_rollValue = ((uint16_t)_upperData << 8) | (uint16_t)_lowerData;
 8003c5c:	19bb      	adds	r3, r7, r6
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	b219      	sxth	r1, r3
 8003c64:	197b      	adds	r3, r7, r5
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	230e      	movs	r3, #14
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	801a      	strh	r2, [r3, #0]

	}
	return _rollValue;
 8003c72:	230e      	movs	r3, #14
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2200      	movs	r2, #0
 8003c78:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b005      	add	sp, #20
 8003c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c82 <readPitchValue>:
//X axis
int16_t readPitchValue(I2C_HandleTypeDef *_hi2c_config)
{
 8003c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	uint8_t _bitDataAvailable=0;
 8003c8a:	240d      	movs	r4, #13
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
	uint8_t _bitDataOverrun=0;
 8003c92:	250c      	movs	r5, #12
 8003c94:	197b      	adds	r3, r7, r5
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
	uint8_t _upperData=0;
 8003c9a:	260b      	movs	r6, #11
 8003c9c:	19bb      	adds	r3, r7, r6
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
	uint8_t _lowerData=0;
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
	int16_t _pitchValue=0;
 8003caa:	220e      	movs	r2, #14
 8003cac:	18bb      	adds	r3, r7, r2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	801a      	strh	r2, [r3, #0]
	//check if X-axis data is available
	_bitDataAvailable = (readStatusRegister(_hi2c_config) & 0x1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fe6b 	bl	8003990 <readStatusRegister>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	701a      	strb	r2, [r3, #0]
	// check when overrun occurs
	_bitDataOverrun = (readStatusRegister(_hi2c_config) & 0x10) >>4;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7ff fe61 	bl	8003990 <readStatusRegister>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	111b      	asrs	r3, r3, #4
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	197b      	adds	r3, r7, r5
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	400a      	ands	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]
	if(_bitDataAvailable == 1 && _bitDataOverrun == 1)
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d11f      	bne.n	8003d24 <readPitchValue+0xa2>
 8003ce4:	197b      	adds	r3, r7, r5
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d11b      	bne.n	8003d24 <readPitchValue+0xa2>
	{
		_upperData = readRegister(_hi2c_config, DEVICE_OUT_X_H_REG);
 8003cec:	19bc      	adds	r4, r7, r6
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2129      	movs	r1, #41	; 0x29
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7ff fdf5 	bl	80038e2 <readRegister>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	7023      	strb	r3, [r4, #0]
		_lowerData = readRegister(_hi2c_config, DEVICE_OUT_X_L_REG);
 8003cfc:	250a      	movs	r5, #10
 8003cfe:	197c      	adds	r4, r7, r5
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2128      	movs	r1, #40	; 0x28
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff fdec 	bl	80038e2 <readRegister>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	7023      	strb	r3, [r4, #0]
		//data proccessing
		_pitchValue = ((uint16_t)_upperData << 8) | (uint16_t)_lowerData;
 8003d0e:	19bb      	adds	r3, r7, r6
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	b219      	sxth	r1, r3
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	230e      	movs	r3, #14
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	430a      	orrs	r2, r1
 8003d22:	801a      	strh	r2, [r3, #0]

	}
	return _pitchValue;
 8003d24:	230e      	movs	r3, #14
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b005      	add	sp, #20
 8003d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d34 <readYawValue>:
//Z axis
int16_t readYawValue(I2C_HandleTypeDef *_hi2c_config)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	uint8_t _bitDataAvailable=0;
 8003d3c:	240d      	movs	r4, #13
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
	uint8_t _bitDataOverrun=0;
 8003d44:	250c      	movs	r5, #12
 8003d46:	197b      	adds	r3, r7, r5
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
	uint8_t _upperData=0;
 8003d4c:	260b      	movs	r6, #11
 8003d4e:	19bb      	adds	r3, r7, r6
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
	uint8_t _lowerData=0;
 8003d54:	230a      	movs	r3, #10
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
	int16_t _yawValue=0;
 8003d5c:	220e      	movs	r2, #14
 8003d5e:	18bb      	adds	r3, r7, r2
 8003d60:	2200      	movs	r2, #0
 8003d62:	801a      	strh	r2, [r3, #0]
	//check if X-axis data is available
	_bitDataAvailable = (readStatusRegister(_hi2c_config) & 0x4)>>2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fe12 	bl	8003990 <readStatusRegister>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	109b      	asrs	r3, r3, #2
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	2101      	movs	r1, #1
 8003d76:	400a      	ands	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
	// check when overrun occurs
	_bitDataOverrun = (readStatusRegister(_hi2c_config) & 0x40) >>6;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff fe07 	bl	8003990 <readStatusRegister>
 8003d82:	0003      	movs	r3, r0
 8003d84:	119b      	asrs	r3, r3, #6
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	197b      	adds	r3, r7, r5
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	701a      	strb	r2, [r3, #0]
	if(_bitDataAvailable == 1 && _bitDataOverrun == 1)
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d11f      	bne.n	8003dd8 <readYawValue+0xa4>
 8003d98:	197b      	adds	r3, r7, r5
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d11b      	bne.n	8003dd8 <readYawValue+0xa4>
	{
		_upperData = readRegister(_hi2c_config, DEVICE_OUT_Z_H_REG);
 8003da0:	19bc      	adds	r4, r7, r6
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	212d      	movs	r1, #45	; 0x2d
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7ff fd9b 	bl	80038e2 <readRegister>
 8003dac:	0003      	movs	r3, r0
 8003dae:	7023      	strb	r3, [r4, #0]
		_lowerData = readRegister(_hi2c_config, DEVICE_OUT_Z_L_REG);
 8003db0:	250a      	movs	r5, #10
 8003db2:	197c      	adds	r4, r7, r5
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fd92 	bl	80038e2 <readRegister>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	7023      	strb	r3, [r4, #0]
		//data proccessing
		_yawValue = ((uint16_t)_upperData << 8) | (uint16_t)_lowerData;
 8003dc2:	19bb      	adds	r3, r7, r6
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	b219      	sxth	r1, r3
 8003dca:	197b      	adds	r3, r7, r5
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b21a      	sxth	r2, r3
 8003dd0:	230e      	movs	r3, #14
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	801a      	strh	r2, [r3, #0]

	}
	return _yawValue;
 8003dd8:	230e      	movs	r3, #14
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b005      	add	sp, #20
 8003de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de8 <__libc_init_array>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	2600      	movs	r6, #0
 8003dec:	4d0c      	ldr	r5, [pc, #48]	; (8003e20 <__libc_init_array+0x38>)
 8003dee:	4c0d      	ldr	r4, [pc, #52]	; (8003e24 <__libc_init_array+0x3c>)
 8003df0:	1b64      	subs	r4, r4, r5
 8003df2:	10a4      	asrs	r4, r4, #2
 8003df4:	42a6      	cmp	r6, r4
 8003df6:	d109      	bne.n	8003e0c <__libc_init_array+0x24>
 8003df8:	2600      	movs	r6, #0
 8003dfa:	f000 f821 	bl	8003e40 <_init>
 8003dfe:	4d0a      	ldr	r5, [pc, #40]	; (8003e28 <__libc_init_array+0x40>)
 8003e00:	4c0a      	ldr	r4, [pc, #40]	; (8003e2c <__libc_init_array+0x44>)
 8003e02:	1b64      	subs	r4, r4, r5
 8003e04:	10a4      	asrs	r4, r4, #2
 8003e06:	42a6      	cmp	r6, r4
 8003e08:	d105      	bne.n	8003e16 <__libc_init_array+0x2e>
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	00b3      	lsls	r3, r6, #2
 8003e0e:	58eb      	ldr	r3, [r5, r3]
 8003e10:	4798      	blx	r3
 8003e12:	3601      	adds	r6, #1
 8003e14:	e7ee      	b.n	8003df4 <__libc_init_array+0xc>
 8003e16:	00b3      	lsls	r3, r6, #2
 8003e18:	58eb      	ldr	r3, [r5, r3]
 8003e1a:	4798      	blx	r3
 8003e1c:	3601      	adds	r6, #1
 8003e1e:	e7f2      	b.n	8003e06 <__libc_init_array+0x1e>
 8003e20:	08003ef8 	.word	0x08003ef8
 8003e24:	08003ef8 	.word	0x08003ef8
 8003e28:	08003ef8 	.word	0x08003ef8
 8003e2c:	08003efc 	.word	0x08003efc

08003e30 <memset>:
 8003e30:	0003      	movs	r3, r0
 8003e32:	1882      	adds	r2, r0, r2
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d100      	bne.n	8003e3a <memset+0xa>
 8003e38:	4770      	bx	lr
 8003e3a:	7019      	strb	r1, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	e7f9      	b.n	8003e34 <memset+0x4>

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
