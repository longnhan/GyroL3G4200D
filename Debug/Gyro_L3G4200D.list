
Gyro_L3G4200D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b8  080047b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080047b8  080047b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b8  080047b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  20000010  080047d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  080047d0  00021288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1d2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358a  00000000  00000000  0003d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00040798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00041e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000363c  00000000  00000000  00043320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a360  00000000  00000000  0004695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bac  00000000  00000000  00060cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa868  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  000fa8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004658 	.word	0x08004658

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004658 	.word	0x08004658

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fb50 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f856 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f92a 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000404:	f000 f8da 	bl	80005bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000408:	f000 f898 	bl	800053c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800040c:	f003 f8e8 	bl	80035e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000410:	4a18      	ldr	r2, [pc, #96]	; (8000474 <main+0x80>)
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <main+0x84>)
 8000414:	2100      	movs	r1, #0
 8000416:	0018      	movs	r0, r3
 8000418:	f003 f904 	bl	8003624 <osThreadNew>
 800041c:	0002      	movs	r2, r0
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <main+0x88>)
 8000420:	601a      	str	r2, [r3, #0]

  /* creation of read_I2C */
  read_I2CHandle = osThreadNew(readGyroValue, NULL, &read_I2C_attributes);
 8000422:	4a17      	ldr	r2, [pc, #92]	; (8000480 <main+0x8c>)
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <main+0x90>)
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f003 f8fb 	bl	8003624 <osThreadNew>
 800042e:	0002      	movs	r2, r0
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <main+0x94>)
 8000432:	601a      	str	r2, [r3, #0]

  /* creation of send_UART */
  send_UARTHandle = osThreadNew(sendUARTValue, NULL, &send_UART_attributes);
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <main+0x98>)
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <main+0x9c>)
 8000438:	2100      	movs	r1, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f003 f8f2 	bl	8003624 <osThreadNew>
 8000440:	0002      	movs	r2, r0
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <main+0xa0>)
 8000444:	601a      	str	r2, [r3, #0]

  /* creation of toggleLED */
  toggleLEDHandle = osThreadNew(toggleOnboardLED, NULL, &toggleLED_attributes);
 8000446:	4a14      	ldr	r2, [pc, #80]	; (8000498 <main+0xa4>)
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <main+0xa8>)
 800044a:	2100      	movs	r1, #0
 800044c:	0018      	movs	r0, r3
 800044e:	f003 f8e9 	bl	8003624 <osThreadNew>
 8000452:	0002      	movs	r2, r0
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <main+0xac>)
 8000456:	601a      	str	r2, [r3, #0]
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bufferData[0]=readDeviceName(&hi2c1);
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <main+0xb0>)
 800045a:	0018      	movs	r0, r3
 800045c:	f003 f898 	bl	8003590 <readDeviceName>
 8000460:	0003      	movs	r3, r0
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <main+0xb4>)
 8000466:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000468:	23fa      	movs	r3, #250	; 0xfa
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fb51 	bl	8000b14 <HAL_Delay>
  {
 8000472:	e7f1      	b.n	8000458 <main+0x64>
 8000474:	080046a0 	.word	0x080046a0
 8000478:	080006f9 	.word	0x080006f9
 800047c:	20001148 	.word	0x20001148
 8000480:	080046c4 	.word	0x080046c4
 8000484:	08000709 	.word	0x08000709
 8000488:	2000119c 	.word	0x2000119c
 800048c:	080046e8 	.word	0x080046e8
 8000490:	08000719 	.word	0x08000719
 8000494:	2000114c 	.word	0x2000114c
 8000498:	0800470c 	.word	0x0800470c
 800049c:	08000729 	.word	0x08000729
 80004a0:	20001230 	.word	0x20001230
 80004a4:	20001150 	.word	0x20001150
 80004a8:	20001234 	.word	0x20001234

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b093      	sub	sp, #76	; 0x4c
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	2414      	movs	r4, #20
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2334      	movs	r3, #52	; 0x34
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f004 f8c3 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	0018      	movs	r0, r3
 80004c6:	2310      	movs	r3, #16
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f004 f8bc 	bl	8004648 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fa87 	bl	80019e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2202      	movs	r2, #2
 80004de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2240      	movs	r2, #64	; 0x40
 80004f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fabf 	bl	8001a80 <HAL_RCC_OscConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000506:	f000 f931 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2207      	movs	r2, #7
 800050e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2100      	movs	r1, #0
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fdba 	bl	80020a0 <HAL_RCC_ClockConfig>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000530:	f000 f91c 	bl	800076c <Error_Handler>
  }
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b013      	add	sp, #76	; 0x4c
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fd4f 	bl	800101c <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 f8f3 	bl	800076c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f001 f994 	bl	80018b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 f8ea 	bl	800076c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f001 f9d7 	bl	8001950 <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f8e1 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20001150 	.word	0x20001150
 80005b4:	40005400 	.word	0x40005400
 80005b8:	00303d5b 	.word	0x00303d5b

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <MX_USART2_UART_Init+0x98>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005c8:	22e1      	movs	r2, #225	; 0xe1
 80005ca:	0252      	lsls	r2, r2, #9
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	0552      	lsls	r2, r2, #21
 80005d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005e4:	220c      	movs	r2, #12
 80005e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART2_UART_Init+0x94>)
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_USART2_UART_Init+0x94>)
 8000608:	0018      	movs	r0, r3
 800060a:	f002 fae7 	bl	8002bdc <HAL_UART_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000612:	f000 f8ab 	bl	800076c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x94>)
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fed8 	bl	80033d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000624:	f000 f8a2 	bl	800076c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x94>)
 800062a:	2100      	movs	r1, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f002 ff0f 	bl	8003450 <HAL_UARTEx_SetRxFifoThreshold>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000636:	f000 f899 	bl	800076c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x94>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fe8d 	bl	800335c <HAL_UARTEx_DisableFifoMode>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000646:	f000 f891 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200011a0 	.word	0x200011a0
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	240c      	movs	r4, #12
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f003 ffed 	bl	8004648 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000674:	2104      	movs	r1, #4
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_GPIO_Init+0x9c>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_GPIO_Init+0x9c>)
 800068c:	2120      	movs	r1, #32
 800068e:	430a      	orrs	r2, r1
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000696:	2220      	movs	r2, #32
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006b6:	23a0      	movs	r3, #160	; 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	2120      	movs	r1, #32
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fc74 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2220      	movs	r2, #32
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	23a0      	movs	r3, #160	; 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fafc 	bl	8000ce4 <HAL_GPIO_Init>

}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b009      	add	sp, #36	; 0x24
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f003 f825 	bl	8003750 <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartDefaultTask+0x8>

08000708 <readGyroValue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readGyroValue */
void readGyroValue(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readGyroValue */
  /* Infinite loop */
  for(;;)
  {
//	  bufferData[0]=readDeviceName(&hi2c1);
	  osDelay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f003 f81d 	bl	8003750 <osDelay>
 8000716:	e7fb      	b.n	8000710 <readGyroValue+0x8>

08000718 <sendUARTValue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendUARTValue */
void sendUARTValue(void *argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendUARTValue */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f003 f815 	bl	8003750 <osDelay>
 8000726:	e7fb      	b.n	8000720 <sendUARTValue+0x8>

08000728 <toggleOnboardLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleOnboardLED */
void toggleOnboardLED(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN toggleOnboardLED */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000730:	23a0      	movs	r3, #160	; 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	2120      	movs	r1, #32
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fc55 	bl	8000fe6 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800073c:	23fa      	movs	r3, #250	; 0xfa
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f003 f805 	bl	8003750 <osDelay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000746:	e7f3      	b.n	8000730 <toggleOnboardLED+0x8>

08000748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d101      	bne.n	800075e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075a:	f000 f9bf 	bl	8000adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40012c00 	.word	0x40012c00

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	641a      	str	r2, [r3, #64]	; 0x40
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0549      	lsls	r1, r1, #21
 80007a0:	430a      	orrs	r2, r1
 80007a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	4013      	ands	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007b2:	2302      	movs	r3, #2
 80007b4:	425b      	negs	r3, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	2103      	movs	r1, #3
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fa6c 	bl	8000c98 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007c0:	23c0      	movs	r3, #192	; 0xc0
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f9c9 	bl	8000b5c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b091      	sub	sp, #68	; 0x44
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	232c      	movs	r3, #44	; 0x2c
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	0018      	movs	r0, r3
 80007e6:	2314      	movs	r3, #20
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f003 ff2c 	bl	8004648 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	2410      	movs	r4, #16
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	231c      	movs	r3, #28
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 ff24 	bl	8004648 <memset>
  if(hi2c->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <HAL_I2C_MspInit+0xbc>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d13f      	bne.n	800088a <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2220      	movs	r2, #32
 800080e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fe15 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000822:	f7ff ffa3 	bl	800076c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_I2C_MspInit+0xc0>)
 8000828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_I2C_MspInit+0xc0>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_I2C_MspInit+0xc0>)
 8000834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800083e:	212c      	movs	r1, #44	; 0x2c
 8000840:	187b      	adds	r3, r7, r1
 8000842:	22c0      	movs	r2, #192	; 0xc0
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2212      	movs	r2, #18
 800084c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2206      	movs	r2, #6
 800085e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	187a      	adds	r2, r7, r1
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fa3b 	bl	8000ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_I2C_MspInit+0xc0>)
 8000870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_I2C_MspInit+0xc0>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0389      	lsls	r1, r1, #14
 8000878:	430a      	orrs	r2, r1
 800087a:	63da      	str	r2, [r3, #60]	; 0x3c
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_I2C_MspInit+0xc0>)
 800087e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	039b      	lsls	r3, r3, #14
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b011      	add	sp, #68	; 0x44
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b091      	sub	sp, #68	; 0x44
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	232c      	movs	r3, #44	; 0x2c
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f003 feca 	bl	8004648 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	2410      	movs	r4, #16
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	231c      	movs	r3, #28
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f003 fec2 	bl	8004648 <memset>
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <HAL_UART_MspInit+0xb8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d13e      	bne.n	800094c <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2202      	movs	r2, #2
 80008d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fdb3 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008e6:	f7ff ff41 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_UART_MspInit+0xbc>)
 80008ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_UART_MspInit+0xbc>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0289      	lsls	r1, r1, #10
 80008f4:	430a      	orrs	r2, r1
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0xbc>)
 80008fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	029b      	lsls	r3, r3, #10
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0xbc>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_UART_MspInit+0xbc>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0xbc>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	212c      	movs	r1, #44	; 0x2c
 8000920:	187b      	adds	r3, r7, r1
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2201      	movs	r2, #1
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	187a      	adds	r2, r7, r1
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f9cc 	bl	8000ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b011      	add	sp, #68	; 0x44
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	40004400 	.word	0x40004400
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	0019      	movs	r1, r3
 8000972:	200d      	movs	r0, #13
 8000974:	f000 f990 	bl	8000c98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000978:	200d      	movs	r0, #13
 800097a:	f000 f9a2 	bl	8000cc2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <HAL_InitTick+0xa8>)
 8000980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_InitTick+0xa8>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0109      	lsls	r1, r1, #4
 8000988:	430a      	orrs	r2, r1
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <HAL_InitTick+0xa8>)
 800098e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099a:	230c      	movs	r3, #12
 800099c:	18fa      	adds	r2, r7, r3
 800099e:	2310      	movs	r3, #16
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fd25 	bl	80023f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009aa:	f001 fd0d 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 80009ae:	0003      	movs	r3, r0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	4914      	ldr	r1, [pc, #80]	; (8000a08 <HAL_InitTick+0xac>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff fba6 	bl	8000108 <__udivsi3>
 80009bc:	0003      	movs	r3, r0
 80009be:	3b01      	subs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0xb0>)
 80009c4:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <HAL_InitTick+0xb4>)
 80009c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_InitTick+0xb0>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <HAL_InitTick+0xb8>)
 80009cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_InitTick+0xb0>)
 80009d0:	6a3a      	ldr	r2, [r7, #32]
 80009d2:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_InitTick+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_InitTick+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_InitTick+0xb0>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fe64 	bl	80026b0 <HAL_TIM_Base_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d105      	bne.n	80009f8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_InitTick+0xb0>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 febe 	bl	8002770 <HAL_TIM_Base_Start_IT>
 80009f4:	0003      	movs	r3, r0
 80009f6:	e000      	b.n	80009fa <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	0018      	movs	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b00a      	add	sp, #40	; 0x28
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000
 8000a08:	000f4240 	.word	0x000f4240
 8000a0c:	20001238 	.word	0x20001238
 8000a10:	40012c00 	.word	0x40012c00
 8000a14:	000003e7 	.word	0x000003e7

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fef6 	bl	800281c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20001238 	.word	0x20001238

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a4c:	f7ff fff6 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	; (8000a94 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a76:	f003 fdc3 	bl	8004600 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a7a:	f7ff fcbb 	bl	80003f4 <main>

08000a7e <LoopForever>:

LoopForever:
  b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   r0, =_estack
 8000a80:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a8c:	080047c0 	.word	0x080047c0
  ldr r2, =_sbss
 8000a90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a94:	20001288 	.word	0x20001288

08000a98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x3c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Init+0x3c>)
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	0049      	lsls	r1, r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff50 	bl	800095c <HAL_InitTick>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe56 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	18d2      	adds	r2, r2, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20001284 	.word	0x20001284

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20001284 	.word	0x20001284

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff0 	bl	8000b00 <HAL_GetTick>
 8000b20:	0003      	movs	r3, r0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	189b      	adds	r3, r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	f7ff ffe0 	bl	8000b00 <HAL_GetTick>
 8000b40:	0002      	movs	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40010000 	.word	0x40010000
 8000b84:	fffff9ff 	.word	0xfffff9ff

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9a:	d809      	bhi.n	8000bb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_EnableIRQ+0x30>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	; 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	; 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	; 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	1c02      	adds	r2, r0, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff81 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	0002      	movs	r2, r0
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff57 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e147      	b.n	8000f84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <HAL_GPIO_Init+0x28>
 8000d0a:	e138      	b.n	8000f7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2207      	movs	r2, #7
 8000de0:	4013      	ands	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2107      	movs	r1, #7
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	6939      	ldr	r1, [r7, #16]
 8000e14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	401a      	ands	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_GPIO_Init+0x174>
 8000e56:	e092      	b.n	8000f7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3318      	adds	r3, #24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	589b      	ldr	r3, [r3, r2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	220f      	movs	r2, #15
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a45      	ldr	r2, [pc, #276]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1c6>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <HAL_GPIO_Init+0x2c0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1c2>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a43      	ldr	r2, [pc, #268]	; (8000fa8 <HAL_GPIO_Init+0x2c4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1be>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	00d2      	lsls	r2, r2, #3
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ec0:	4936      	ldr	r1, [pc, #216]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	035b      	lsls	r3, r3, #13
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	039b      	lsls	r3, r3, #14
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f24:	2384      	movs	r3, #132	; 0x84
 8000f26:	58d3      	ldr	r3, [r2, r3]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f48:	4914      	ldr	r1, [pc, #80]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f4a:	2284      	movs	r2, #132	; 0x84
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	58d3      	ldr	r3, [r2, r3]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_Init+0x2ae>
 8000f90:	e6b0      	b.n	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	50000800 	.word	0x50000800
 8000fa8:	50000c00 	.word	0x50000c00

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	1cbb      	adds	r3, r7, #2
 8000fba:	1c02      	adds	r2, r0, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	1c7b      	adds	r3, r7, #1
 8000fc0:	1c0a      	adds	r2, r1, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc4:	1c7b      	adds	r3, r7, #1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fcc:	1cbb      	adds	r3, r7, #2
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	000a      	movs	r2, r1
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	041a      	lsls	r2, r3, #16
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	1cb9      	adds	r1, r7, #2
 800100a:	8809      	ldrh	r1, [r1, #0]
 800100c:	400b      	ands	r3, r1
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b004      	add	sp, #16
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e082      	b.n	8001134 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2241      	movs	r2, #65	; 0x41
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d107      	bne.n	800104a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2240      	movs	r2, #64	; 0x40
 800103e:	2100      	movs	r1, #0
 8001040:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff fbc7 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2241      	movs	r2, #65	; 0x41
 800104e:	2124      	movs	r1, #36	; 0x24
 8001050:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	438a      	bics	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4934      	ldr	r1, [pc, #208]	; (800113c <HAL_I2C_Init+0x120>)
 800106c:	400a      	ands	r2, r1
 800106e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4931      	ldr	r1, [pc, #196]	; (8001140 <HAL_I2C_Init+0x124>)
 800107c:	400a      	ands	r2, r1
 800107e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d108      	bne.n	800109a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0209      	lsls	r1, r1, #8
 8001094:	430a      	orrs	r2, r1
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	e007      	b.n	80010aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2184      	movs	r1, #132	; 0x84
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	430a      	orrs	r2, r1
 80010a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d104      	bne.n	80010bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	491f      	ldr	r1, [pc, #124]	; (8001144 <HAL_I2C_Init+0x128>)
 80010c8:	430a      	orrs	r2, r1
 80010ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	491a      	ldr	r1, [pc, #104]	; (8001140 <HAL_I2C_Init+0x124>)
 80010d8:	400a      	ands	r2, r1
 80010da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69d9      	ldr	r1, [r3, #28]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1a      	ldr	r2, [r3, #32]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2241      	movs	r2, #65	; 0x41
 8001120:	2120      	movs	r1, #32
 8001122:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2242      	movs	r2, #66	; 0x42
 800112e:	2100      	movs	r1, #0
 8001130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	f0ffffff 	.word	0xf0ffffff
 8001140:	ffff7fff 	.word	0xffff7fff
 8001144:	02008000 	.word	0x02008000

08001148 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	000c      	movs	r4, r1
 8001152:	0010      	movs	r0, r2
 8001154:	0019      	movs	r1, r3
 8001156:	230a      	movs	r3, #10
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	1c22      	adds	r2, r4, #0
 800115c:	801a      	strh	r2, [r3, #0]
 800115e:	2308      	movs	r3, #8
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	1c02      	adds	r2, r0, #0
 8001164:	801a      	strh	r2, [r3, #0]
 8001166:	1dbb      	adds	r3, r7, #6
 8001168:	1c0a      	adds	r2, r1, #0
 800116a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2241      	movs	r2, #65	; 0x41
 8001170:	5c9b      	ldrb	r3, [r3, r2]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b20      	cmp	r3, #32
 8001176:	d000      	beq.n	800117a <HAL_I2C_Mem_Read+0x32>
 8001178:	e110      	b.n	800139c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <HAL_I2C_Mem_Read+0x42>
 8001180:	232c      	movs	r3, #44	; 0x2c
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e103      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	5c9b      	ldrb	r3, [r3, r2]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_I2C_Mem_Read+0x5c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e0fc      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011ac:	f7ff fca8 	bl	8000b00 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	0219      	lsls	r1, r3, #8
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2319      	movs	r3, #25
 80011c0:	2201      	movs	r2, #1
 80011c2:	f000 f979 	bl	80014b8 <I2C_WaitOnFlagUntilTimeout>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0e7      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2241      	movs	r2, #65	; 0x41
 80011d2:	2122      	movs	r1, #34	; 0x22
 80011d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2242      	movs	r2, #66	; 0x42
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	222c      	movs	r2, #44	; 0x2c
 80011ee:	18ba      	adds	r2, r7, r2
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011fa:	1dbb      	adds	r3, r7, #6
 80011fc:	881c      	ldrh	r4, [r3, #0]
 80011fe:	2308      	movs	r3, #8
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	230a      	movs	r3, #10
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	8819      	ldrh	r1, [r3, #0]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	0023      	movs	r3, r4
 8001216:	f000 f8cb 	bl	80013b0 <I2C_RequestMemoryRead>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d005      	beq.n	800122a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2240      	movs	r2, #64	; 0x40
 8001222:	2100      	movs	r1, #0
 8001224:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0b9      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d911      	bls.n	8001258 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123e:	b2da      	uxtb	r2, r3
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	045c      	lsls	r4, r3, #17
 8001244:	230a      	movs	r3, #10
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	8819      	ldrh	r1, [r3, #0]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <HAL_I2C_Mem_Read+0x260>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	0023      	movs	r3, r4
 8001252:	f000 faf7 	bl	8001844 <I2C_TransferConfig>
 8001256:	e012      	b.n	800127e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001266:	b2da      	uxtb	r2, r3
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	049c      	lsls	r4, r3, #18
 800126c:	230a      	movs	r3, #10
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	8819      	ldrh	r1, [r3, #0]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <HAL_I2C_Mem_Read+0x260>)
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	0023      	movs	r3, r4
 800127a:	f000 fae3 	bl	8001844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800127e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	0013      	movs	r3, r2
 8001288:	2200      	movs	r2, #0
 800128a:	2104      	movs	r1, #4
 800128c:	f000 f914 	bl	80014b8 <I2C_WaitOnFlagUntilTimeout>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e082      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b4:	3b01      	subs	r3, #1
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d03a      	beq.n	800134a <HAL_I2C_Mem_Read+0x202>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d136      	bne.n	800134a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	0013      	movs	r3, r2
 80012e6:	2200      	movs	r2, #0
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	f000 f8e5 	bl	80014b8 <I2C_WaitOnFlagUntilTimeout>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e053      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	d911      	bls.n	8001324 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	22ff      	movs	r2, #255	; 0xff
 8001304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130a:	b2da      	uxtb	r2, r3
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	045c      	lsls	r4, r3, #17
 8001310:	230a      	movs	r3, #10
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	8819      	ldrh	r1, [r3, #0]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	0023      	movs	r3, r4
 800131e:	f000 fa91 	bl	8001844 <I2C_TransferConfig>
 8001322:	e012      	b.n	800134a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001328:	b29a      	uxth	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001332:	b2da      	uxtb	r2, r3
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	049c      	lsls	r4, r3, #18
 8001338:	230a      	movs	r3, #10
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	0023      	movs	r3, r4
 8001346:	f000 fa7d 	bl	8001844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d194      	bne.n	800127e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f92a 	bl	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e01a      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2220      	movs	r2, #32
 800136e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	490c      	ldr	r1, [pc, #48]	; (80013ac <HAL_I2C_Mem_Read+0x264>)
 800137c:	400a      	ands	r2, r1
 800137e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2241      	movs	r2, #65	; 0x41
 8001384:	2120      	movs	r1, #32
 8001386:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2242      	movs	r2, #66	; 0x42
 800138c:	2100      	movs	r1, #0
 800138e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e000      	b.n	800139e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800139c:	2302      	movs	r3, #2
  }
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b007      	add	sp, #28
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	80002400 	.word	0x80002400
 80013ac:	fe00e800 	.word	0xfe00e800

080013b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	000c      	movs	r4, r1
 80013ba:	0010      	movs	r0, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	250a      	movs	r5, #10
 80013c0:	197b      	adds	r3, r7, r5
 80013c2:	1c22      	adds	r2, r4, #0
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	2308      	movs	r3, #8
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	1dbb      	adds	r3, r7, #6
 80013d0:	1c0a      	adds	r2, r1, #0
 80013d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	197b      	adds	r3, r7, r5
 80013dc:	8819      	ldrh	r1, [r3, #0]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <I2C_RequestMemoryRead+0xc0>)
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	f000 fa2d 	bl	8001844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 f8a0 	bl	8001536 <I2C_WaitOnTXISFlagUntilTimeout>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d001      	beq.n	80013fe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e033      	b.n	8001466 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013fe:	1dbb      	adds	r3, r7, #6
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001406:	2308      	movs	r3, #8
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
 8001414:	e019      	b.n	800144a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001416:	2308      	movs	r3, #8
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	6a39      	ldr	r1, [r7, #32]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f881 	bl	8001536 <I2C_WaitOnTXISFlagUntilTimeout>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e014      	b.n	8001466 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800143c:	2308      	movs	r3, #8
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800144a:	6a3a      	ldr	r2, [r7, #32]
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	0013      	movs	r3, r2
 8001454:	2200      	movs	r2, #0
 8001456:	2140      	movs	r1, #64	; 0x40
 8001458:	f000 f82e 	bl	80014b8 <I2C_WaitOnFlagUntilTimeout>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b004      	add	sp, #16
 800146c:	bdb0      	pop	{r4, r5, r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	80002000 	.word	0x80002000

08001474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	2b02      	cmp	r3, #2
 8001488:	d103      	bne.n	8001492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2201      	movs	r2, #1
 800149a:	4013      	ands	r3, r2
 800149c:	2b01      	cmp	r3, #1
 800149e:	d007      	beq.n	80014b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	619a      	str	r2, [r3, #24]
  }
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014c8:	e021      	b.n	800150e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	d01e      	beq.n	800150e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d0:	f7ff fb16 	bl	8000b00 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d302      	bcc.n	80014e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d113      	bne.n	800150e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	2220      	movs	r2, #32
 80014ec:	431a      	orrs	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2241      	movs	r2, #65	; 0x41
 80014f6:	2120      	movs	r1, #32
 80014f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2242      	movs	r2, #66	; 0x42
 80014fe:	2100      	movs	r1, #0
 8001500:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	2100      	movs	r1, #0
 8001508:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4013      	ands	r3, r2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	425a      	negs	r2, r3
 800151e:	4153      	adcs	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	001a      	movs	r2, r3
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d0ce      	beq.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}

08001536 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001542:	e02b      	b.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	0018      	movs	r0, r3
 800154c:	f000 f86e 	bl	800162c <I2C_IsErrorOccurred>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d001      	beq.n	8001558 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e029      	b.n	80015ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	d01e      	beq.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155e:	f7ff facf 	bl	8000b00 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	d302      	bcc.n	8001574 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	2220      	movs	r2, #32
 800157a:	431a      	orrs	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2241      	movs	r2, #65	; 0x41
 8001584:	2120      	movs	r1, #32
 8001586:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2242      	movs	r2, #66	; 0x42
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e007      	b.n	80015ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d1cc      	bne.n	8001544 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015c0:	e028      	b.n	8001614 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 f82f 	bl	800162c <I2C_IsErrorOccurred>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e026      	b.n	8001624 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d6:	f7ff fa93 	bl	8000b00 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d302      	bcc.n	80015ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d113      	bne.n	8001614 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	2220      	movs	r2, #32
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2241      	movs	r2, #65	; 0x41
 80015fc:	2120      	movs	r1, #32
 80015fe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2242      	movs	r2, #66	; 0x42
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e007      	b.n	8001624 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2220      	movs	r2, #32
 800161c:	4013      	ands	r3, r2
 800161e:	2b20      	cmp	r3, #32
 8001620:	d1cf      	bne.n	80015c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b004      	add	sp, #16
 800162a:	bd80      	pop	{r7, pc}

0800162c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001638:	2327      	movs	r3, #39	; 0x27
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2210      	movs	r2, #16
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <I2C_IsErrorOccurred+0x2e>
 8001658:	e08e      	b.n	8001778 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2210      	movs	r2, #16
 8001660:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001662:	e06c      	b.n	800173e <I2C_IsErrorOccurred+0x112>
 8001664:	2427      	movs	r4, #39	; 0x27
 8001666:	193b      	adds	r3, r7, r4
 8001668:	193a      	adds	r2, r7, r4
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3301      	adds	r3, #1
 8001672:	d064      	beq.n	800173e <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001674:	f7ff fa44 	bl	8000b00 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	d306      	bcc.n	8001692 <I2C_IsErrorOccurred+0x66>
 8001684:	193b      	adds	r3, r7, r4
 8001686:	193a      	adds	r2, r7, r4
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d155      	bne.n	800173e <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	01db      	lsls	r3, r3, #7
 800169c:	4013      	ands	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80016a0:	2013      	movs	r0, #19
 80016a2:	183b      	adds	r3, r7, r0
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	2142      	movs	r1, #66	; 0x42
 80016a8:	5c52      	ldrb	r2, [r2, r1]
 80016aa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	401a      	ands	r2, r3
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	429a      	cmp	r2, r3
 80016be:	d137      	bne.n	8001730 <I2C_IsErrorOccurred+0x104>
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	01db      	lsls	r3, r3, #7
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d032      	beq.n	8001730 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80016ca:	183b      	adds	r3, r7, r0
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d02e      	beq.n	8001730 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	01c9      	lsls	r1, r1, #7
 80016e0:	430a      	orrs	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016e4:	f7ff fa0c 	bl	8000b00 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ec:	e020      	b.n	8001730 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016ee:	f7ff fa07 	bl	8000b00 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2027      	movs	r0, #39	; 0x27
 80016fa:	183a      	adds	r2, r7, r0
 80016fc:	1839      	adds	r1, r7, r0
 80016fe:	7809      	ldrb	r1, [r1, #0]
 8001700:	7011      	strb	r1, [r2, #0]
 8001702:	2b19      	cmp	r3, #25
 8001704:	d914      	bls.n	8001730 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	2220      	movs	r2, #32
 800170c:	431a      	orrs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2241      	movs	r2, #65	; 0x41
 8001716:	2120      	movs	r1, #32
 8001718:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2242      	movs	r2, #66	; 0x42
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	2100      	movs	r1, #0
 8001728:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800172a:	183b      	adds	r3, r7, r0
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2220      	movs	r2, #32
 8001738:	4013      	ands	r3, r2
 800173a:	2b20      	cmp	r3, #32
 800173c:	d1d7      	bne.n	80016ee <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2220      	movs	r2, #32
 8001746:	4013      	ands	r3, r2
 8001748:	2b20      	cmp	r3, #32
 800174a:	d004      	beq.n	8001756 <I2C_IsErrorOccurred+0x12a>
 800174c:	2327      	movs	r3, #39	; 0x27
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d086      	beq.n	8001664 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001756:	2327      	movs	r3, #39	; 0x27
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2220      	movs	r2, #32
 8001766:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2204      	movs	r2, #4
 800176c:	4313      	orrs	r3, r2
 800176e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001770:	2327      	movs	r3, #39	; 0x27
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d00c      	beq.n	80017a4 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2201      	movs	r2, #1
 800178e:	4313      	orrs	r3, r2
 8001790:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	0052      	lsls	r2, r2, #1
 800179a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800179c:	2327      	movs	r3, #39	; 0x27
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4013      	ands	r3, r2
 80017ac:	d00c      	beq.n	80017c8 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	2208      	movs	r2, #8
 80017b2:	4313      	orrs	r3, r2
 80017b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	00d2      	lsls	r2, r2, #3
 80017be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017c0:	2327      	movs	r3, #39	; 0x27
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d00c      	beq.n	80017ec <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2202      	movs	r2, #2
 80017d6:	4313      	orrs	r3, r2
 80017d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017e4:	2327      	movs	r3, #39	; 0x27
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80017ec:	2327      	movs	r3, #39	; 0x27
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01d      	beq.n	8001832 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fe3b 	bl	8001474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	490d      	ldr	r1, [pc, #52]	; (8001840 <I2C_IsErrorOccurred+0x214>)
 800180a:	400a      	ands	r2, r1
 800180c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	431a      	orrs	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	2120      	movs	r1, #32
 8001820:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2242      	movs	r2, #66	; 0x42
 8001826:	2100      	movs	r1, #0
 8001828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001832:	2327      	movs	r3, #39	; 0x27
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	781b      	ldrb	r3, [r3, #0]
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b00b      	add	sp, #44	; 0x2c
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	fe00e800 	.word	0xfe00e800

08001844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	0008      	movs	r0, r1
 800184e:	0011      	movs	r1, r2
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	240a      	movs	r4, #10
 8001854:	193b      	adds	r3, r7, r4
 8001856:	1c02      	adds	r2, r0, #0
 8001858:	801a      	strh	r2, [r3, #0]
 800185a:	2009      	movs	r0, #9
 800185c:	183b      	adds	r3, r7, r0
 800185e:	1c0a      	adds	r2, r1, #0
 8001860:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001862:	193b      	adds	r3, r7, r4
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	059b      	lsls	r3, r3, #22
 8001868:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800186a:	183b      	adds	r3, r7, r0
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	0419      	lsls	r1, r3, #16
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001876:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187e:	4313      	orrs	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800188e:	0d51      	lsrs	r1, r2, #21
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	00d2      	lsls	r2, r2, #3
 8001894:	400a      	ands	r2, r1
 8001896:	4907      	ldr	r1, [pc, #28]	; (80018b4 <I2C_TransferConfig+0x70>)
 8001898:	430a      	orrs	r2, r1
 800189a:	43d2      	mvns	r2, r2
 800189c:	401a      	ands	r2, r3
 800189e:	0011      	movs	r1, r2
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b007      	add	sp, #28
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	03ff63ff 	.word	0x03ff63ff

080018b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2241      	movs	r2, #65	; 0x41
 80018c6:	5c9b      	ldrb	r3, [r3, r2]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d138      	bne.n	8001940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2240      	movs	r2, #64	; 0x40
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018d8:	2302      	movs	r3, #2
 80018da:	e032      	b.n	8001942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	2101      	movs	r1, #1
 80018e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2241      	movs	r2, #65	; 0x41
 80018e8:	2124      	movs	r1, #36	; 0x24
 80018ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4911      	ldr	r1, [pc, #68]	; (800194c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001908:	400a      	ands	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2241      	movs	r2, #65	; 0x41
 8001930:	2120      	movs	r1, #32
 8001932:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2240      	movs	r2, #64	; 0x40
 8001938:	2100      	movs	r1, #0
 800193a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
  }
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	ffffefff 	.word	0xffffefff

08001950 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2241      	movs	r2, #65	; 0x41
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	d139      	bne.n	80019da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2240      	movs	r2, #64	; 0x40
 800196a:	5c9b      	ldrb	r3, [r3, r2]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001970:	2302      	movs	r3, #2
 8001972:	e033      	b.n	80019dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2240      	movs	r2, #64	; 0x40
 8001978:	2101      	movs	r1, #1
 800197a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	2124      	movs	r1, #36	; 0x24
 8001982:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	438a      	bics	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	2120      	movs	r1, #32
 80019cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019da:	2302      	movs	r3, #2
  }
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b004      	add	sp, #16
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	fffff0ff 	.word	0xfffff0ff

080019e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d11f      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	0013      	movs	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	189b      	adds	r3, r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4912      	ldr	r1, [pc, #72]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7fe fb74 	bl	8000108 <__udivsi3>
 8001a20:	0003      	movs	r3, r0
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a26:	e008      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e001      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e009      	b.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	401a      	ands	r2, r3
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d0ed      	beq.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	fffff9ff 	.word	0xfffff9ff
 8001a60:	20000000 	.word	0x20000000
 8001a64:	000f4240 	.word	0x000f4240

08001a68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	23e0      	movs	r3, #224	; 0xe0
 8001a72:	01db      	lsls	r3, r3, #7
 8001a74:	4013      	ands	r3, r2
}
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e2f3      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1e>
 8001a9c:	e07c      	b.n	8001b98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9e:	4bc3      	ldr	r3, [pc, #780]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2238      	movs	r2, #56	; 0x38
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa8:	4bc0      	ldr	r3, [pc, #768]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2203      	movs	r2, #3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_OscConfig+0x3e>
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d002      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4bb9      	ldr	r3, [pc, #740]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	d062      	beq.n	8001b96 <HAL_RCC_OscConfig+0x116>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d15e      	bne.n	8001b96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e2ce      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_OscConfig+0x78>
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4baf      	ldr	r3, [pc, #700]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0249      	lsls	r1, r1, #9
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e020      	b.n	8001b3a <HAL_RCC_OscConfig+0xba>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	23a0      	movs	r3, #160	; 0xa0
 8001afe:	02db      	lsls	r3, r3, #11
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10e      	bne.n	8001b22 <HAL_RCC_OscConfig+0xa2>
 8001b04:	4ba9      	ldr	r3, [pc, #676]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4ba8      	ldr	r3, [pc, #672]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	02c9      	lsls	r1, r1, #11
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4ba6      	ldr	r3, [pc, #664]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4ba5      	ldr	r3, [pc, #660]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0249      	lsls	r1, r1, #9
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0xba>
 8001b22:	4ba2      	ldr	r3, [pc, #648]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4ba1      	ldr	r3, [pc, #644]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b28:	49a1      	ldr	r1, [pc, #644]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b9f      	ldr	r3, [pc, #636]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b34:	499f      	ldr	r1, [pc, #636]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d014      	beq.n	8001b6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe ffdd 	bl	8000b00 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7fe ffd8 	bl	8000b00 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e28d      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	4b93      	ldr	r3, [pc, #588]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xcc>
 8001b6a:	e015      	b.n	8001b98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7fe ffc8 	bl	8000b00 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b76:	f7fe ffc3 	bl	8000b00 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e278      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b88:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	029b      	lsls	r3, r3, #10
 8001b90:	4013      	ands	r3, r2
 8001b92:	d1f0      	bne.n	8001b76 <HAL_RCC_OscConfig+0xf6>
 8001b94:	e000      	b.n	8001b98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x124>
 8001ba2:	e099      	b.n	8001cd8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba4:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2238      	movs	r2, #56	; 0x38
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bae:	4b7f      	ldr	r3, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d102      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x144>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d002      	beq.n	8001bca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d135      	bne.n	8001c36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x162>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e24b      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a74      	ldr	r2, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	021a      	lsls	r2, r3, #8
 8001bf2:	4b6e      	ldr	r3, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d112      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bfe:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x33c>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0adb      	lsrs	r3, r3, #11
 8001c18:	2207      	movs	r2, #7
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	4a68      	ldr	r2, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x340>)
 8001c1e:	40da      	lsrs	r2, r3
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x344>)
 8001c22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x348>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7fe fe97 	bl	800095c <HAL_InitTick>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d051      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e221      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d030      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c3e:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5e      	ldr	r2, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x33c>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b55      	ldr	r3, [pc, #340]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0049      	lsls	r1, r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7fe ff4e 	bl	8000b00 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7fe ff49 	bl	8000b00 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1fe      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a4a      	ldr	r2, [pc, #296]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	021a      	lsls	r2, r3, #8
 8001c98:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	e01b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	4949      	ldr	r1, [pc, #292]	; (8001dcc <HAL_RCC_OscConfig+0x34c>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe ff28 	bl	8000b00 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7fe ff23 	bl	8000b00 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1d8      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x236>
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d047      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2238      	movs	r2, #56	; 0x38
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b18      	cmp	r3, #24
 8001cec:	d10a      	bne.n	8001d04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d03c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2f2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d138      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e1ba      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d019      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe fef2 	bl	8000b00 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d22:	f7fe feed 	bl	8000b00 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e1a2      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0f1      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2a2>
 8001d3e:	e018      	b.n	8001d72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fed8 	bl	8000b00 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d56:	f7fe fed3 	bl	8000b00 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e188      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f1      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2204      	movs	r2, #4
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d100      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2fe>
 8001d7c:	e0c6      	b.n	8001f0c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2238      	movs	r2, #56	; 0x38
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d11e      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCC_OscConfig+0x31e>
 8001d9c:	e0b6      	b.n	8001f0c <HAL_RCC_OscConfig+0x48c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d000      	beq.n	8001da8 <HAL_RCC_OscConfig+0x328>
 8001da6:	e0b1      	b.n	8001f0c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e166      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	fffeffff 	.word	0xfffeffff
 8001db4:	fffbffff 	.word	0xfffbffff
 8001db8:	ffff80ff 	.word	0xffff80ff
 8001dbc:	ffffc7ff 	.word	0xffffc7ff
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd0:	4bac      	ldr	r3, [pc, #688]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	055b      	lsls	r3, r3, #21
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x360>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x362>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d011      	beq.n	8001e0a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4ba7      	ldr	r3, [pc, #668]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dea:	4ba6      	ldr	r3, [pc, #664]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	0549      	lsls	r1, r1, #21
 8001df0:	430a      	orrs	r2, r1
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001df4:	4ba3      	ldr	r3, [pc, #652]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	055b      	lsls	r3, r3, #21
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e02:	231f      	movs	r3, #31
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b9f      	ldr	r3, [pc, #636]	; (8002088 <HAL_RCC_OscConfig+0x608>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d11a      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e16:	4b9c      	ldr	r3, [pc, #624]	; (8002088 <HAL_RCC_OscConfig+0x608>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b9b      	ldr	r3, [pc, #620]	; (8002088 <HAL_RCC_OscConfig+0x608>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	0049      	lsls	r1, r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fe6c 	bl	8000b00 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe fe67 	bl	8000b00 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e11c      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e40:	4b91      	ldr	r3, [pc, #580]	; (8002088 <HAL_RCC_OscConfig+0x608>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3e2>
 8001e54:	4b8b      	ldr	r3, [pc, #556]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e58:	4b8a      	ldr	r3, [pc, #552]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e60:	e01c      	b.n	8001e9c <HAL_RCC_OscConfig+0x41c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x404>
 8001e6a:	4b86      	ldr	r3, [pc, #536]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e6e:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e70:	2104      	movs	r1, #4
 8001e72:	430a      	orrs	r2, r1
 8001e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e76:	4b83      	ldr	r3, [pc, #524]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0x41c>
 8001e84:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e88:	4b7e      	ldr	r3, [pc, #504]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e90:	4b7c      	ldr	r3, [pc, #496]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e94:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001e96:	2104      	movs	r1, #4
 8001e98:	438a      	bics	r2, r1
 8001e9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d014      	beq.n	8001ece <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fe2c 	bl	8000b00 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eac:	e009      	b.n	8001ec2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe fe27 	bl	8000b00 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	4a74      	ldr	r2, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x60c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0db      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	4b70      	ldr	r3, [pc, #448]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x42e>
 8001ecc:	e013      	b.n	8001ef6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe fe17 	bl	8000b00 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed6:	e009      	b.n	8001eec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7fe fe12 	bl	8000b00 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x60c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0c6      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eec:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ef6:	231f      	movs	r3, #31
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f04:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f06:	4962      	ldr	r1, [pc, #392]	; (8002090 <HAL_RCC_OscConfig+0x610>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d100      	bne.n	8001f16 <HAL_RCC_OscConfig+0x496>
 8001f14:	e0b0      	b.n	8002078 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f16:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2238      	movs	r2, #56	; 0x38
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d100      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4a4>
 8001f22:	e078      	b.n	8002016 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d153      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b55      	ldr	r3, [pc, #340]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f32:	4958      	ldr	r1, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x614>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe fde2 	bl	8000b00 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe fddd 	bl	8000b00 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e092      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	049b      	lsls	r3, r3, #18
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	431a      	orrs	r2, r3
 8001f88:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0449      	lsls	r1, r1, #17
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	0549      	lsls	r1, r1, #21
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fda9 	bl	8000b00 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe fda4 	bl	8000b00 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e059      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	049b      	lsls	r3, r3, #18
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x534>
 8001fd2:	e051      	b.n	8002078 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001fda:	492e      	ldr	r1, [pc, #184]	; (8002094 <HAL_RCC_OscConfig+0x614>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fd8e 	bl	8000b00 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fd89 	bl	8000b00 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e03e      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	049b      	lsls	r3, r3, #18
 8002004:	4013      	ands	r3, r2
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 800200e:	4923      	ldr	r1, [pc, #140]	; (800209c <HAL_RCC_OscConfig+0x61c>)
 8002010:	400a      	ands	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	e030      	b.n	8002078 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e02b      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_RCC_OscConfig+0x604>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2203      	movs	r2, #3
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	429a      	cmp	r2, r3
 8002034:	d11e      	bne.n	8002074 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2270      	movs	r2, #112	; 0x70
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d117      	bne.n	8002074 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	23fe      	movs	r3, #254	; 0xfe
 8002048:	01db      	lsls	r3, r3, #7
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d10e      	bne.n	8002074 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	23f8      	movs	r3, #248	; 0xf8
 800205a:	039b      	lsls	r3, r3, #14
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	0f5b      	lsrs	r3, r3, #29
 800206a:	075a      	lsls	r2, r3, #29
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b008      	add	sp, #32
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	00001388 	.word	0x00001388
 8002090:	efffffff 	.word	0xefffffff
 8002094:	feffffff 	.word	0xfeffffff
 8002098:	1fc1808c 	.word	0x1fc1808c
 800209c:	effefffc 	.word	0xeffefffc

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0e9      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2207      	movs	r2, #7
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d91e      	bls.n	8002100 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2207      	movs	r2, #7
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fd14 	bl	8000b00 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020dc:	e009      	b.n	80020f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fd0f 	bl	8000b00 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_RCC_ClockConfig+0x1f4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0ca      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2207      	movs	r2, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d015      	beq.n	8002136 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d006      	beq.n	8002122 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002114:	4b60      	ldr	r3, [pc, #384]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	21e0      	movs	r1, #224	; 0xe0
 800211c:	01c9      	lsls	r1, r1, #7
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a5d      	ldr	r2, [pc, #372]	; (800229c <HAL_RCC_ClockConfig+0x1fc>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d057      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	4013      	ands	r3, r2
 8002152:	d12b      	bne.n	80021ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e097      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d107      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	049b      	lsls	r3, r3, #18
 8002168:	4013      	ands	r3, r2
 800216a:	d11f      	bne.n	80021ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e08b      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4013      	ands	r3, r2
 8002182:	d113      	bne.n	80021ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e07f      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d106      	bne.n	800219e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d108      	bne.n	80021ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e074      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e06d      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2207      	movs	r2, #7
 80021b2:	4393      	bics	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7fe fc9e 	bl	8000b00 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c8:	e009      	b.n	80021de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7fe fc99 	bl	8000b00 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <HAL_RCC_ClockConfig+0x1f4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e054      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2238      	movs	r2, #56	; 0x38
 80021e4:	401a      	ands	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1ec      	bne.n	80021ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2207      	movs	r2, #7
 80021f6:	4013      	ands	r3, r2
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d21e      	bcs.n	800223c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2207      	movs	r2, #7
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002210:	f7fe fc76 	bl	8000b00 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002218:	e009      	b.n	800222e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221a:	f7fe fc71 	bl	8000b00 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_RCC_ClockConfig+0x1f4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e02c      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2207      	movs	r2, #7
 8002234:	4013      	ands	r3, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d1ee      	bne.n	800221a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2204      	movs	r2, #4
 8002242:	4013      	ands	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_RCC_ClockConfig+0x200>)
 800224c:	4013      	ands	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800225a:	f000 f829 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800225e:	0001      	movs	r1, r0
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	220f      	movs	r2, #15
 8002268:	401a      	ands	r2, r3
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_RCC_ClockConfig+0x204>)
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	58d3      	ldr	r3, [r2, r3]
 8002270:	221f      	movs	r2, #31
 8002272:	4013      	ands	r3, r2
 8002274:	000a      	movs	r2, r1
 8002276:	40da      	lsrs	r2, r3
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x208>)
 800227a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x20c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f7fe fb6b 	bl	800095c <HAL_InitTick>
 8002286:	0003      	movs	r3, r0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40022000 	.word	0x40022000
 8002294:	00001388 	.word	0x00001388
 8002298:	40021000 	.word	0x40021000
 800229c:	fffff0ff 	.word	0xfffff0ff
 80022a0:	ffff8fff 	.word	0xffff8fff
 80022a4:	08004730 	.word	0x08004730
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2238      	movs	r2, #56	; 0x38
 80022bc:	4013      	ands	r3, r2
 80022be:	d10f      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0adb      	lsrs	r3, r3, #11
 80022c6:	2207      	movs	r2, #7
 80022c8:	4013      	ands	r3, r2
 80022ca:	2201      	movs	r2, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	4835      	ldr	r0, [pc, #212]	; (80023ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80022d6:	f7fd ff17 	bl	8000108 <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e05d      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2238      	movs	r2, #56	; 0x38
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e054      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2238      	movs	r2, #56	; 0x38
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d138      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	2207      	movs	r2, #7
 8002310:	4013      	ands	r3, r2
 8002312:	3301      	adds	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d10d      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	4824      	ldr	r0, [pc, #144]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002320:	f7fd fef2 	bl	8000108 <__udivsi3>
 8002324:	0003      	movs	r3, r0
 8002326:	0019      	movs	r1, r3
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	227f      	movs	r2, #127	; 0x7f
 8002330:	4013      	ands	r3, r2
 8002332:	434b      	muls	r3, r1
 8002334:	617b      	str	r3, [r7, #20]
        break;
 8002336:	e00d      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	481c      	ldr	r0, [pc, #112]	; (80023ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800233c:	f7fd fee4 	bl	8000108 <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	0019      	movs	r1, r3
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	227f      	movs	r2, #127	; 0x7f
 800234c:	4013      	ands	r3, r2
 800234e:	434b      	muls	r3, r1
 8002350:	617b      	str	r3, [r7, #20]
        break;
 8002352:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0f5b      	lsrs	r3, r3, #29
 800235a:	2207      	movs	r2, #7
 800235c:	4013      	ands	r3, r2
 800235e:	3301      	adds	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	6978      	ldr	r0, [r7, #20]
 8002366:	f7fd fecf 	bl	8000108 <__udivsi3>
 800236a:	0003      	movs	r3, r0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e015      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2238      	movs	r2, #56	; 0x38
 8002376:	4013      	ands	r3, r2
 8002378:	2b20      	cmp	r3, #32
 800237a:	d103      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e00b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2238      	movs	r2, #56	; 0x38
 800238a:	4013      	ands	r3, r2
 800238c:	2b18      	cmp	r3, #24
 800238e:	d103      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002390:	23fa      	movs	r3, #250	; 0xfa
 8002392:	01db      	lsls	r3, r3, #7
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e001      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800239c:	693b      	ldr	r3, [r7, #16]
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b006      	add	sp, #24
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40021000 	.word	0x40021000
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000000 	.word	0x20000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023cc:	f7ff fff2 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d0:	0004      	movs	r4, r0
 80023d2:	f7ff fb49 	bl	8001a68 <LL_RCC_GetAPB1Prescaler>
 80023d6:	0003      	movs	r3, r0
 80023d8:	0b1a      	lsrs	r2, r3, #12
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	58d3      	ldr	r3, [r2, r3]
 80023e0:	221f      	movs	r2, #31
 80023e2:	4013      	ands	r3, r2
 80023e4:	40dc      	lsrs	r4, r3
 80023e6:	0023      	movs	r3, r4
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	08004770 	.word	0x08004770

080023f4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_RCC_GetClockConfig+0x4c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2207      	movs	r2, #7
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_GetClockConfig+0x4c>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	23f0      	movs	r3, #240	; 0xf0
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCC_GetClockConfig+0x4c>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	23e0      	movs	r3, #224	; 0xe0
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	401a      	ands	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetClockConfig+0x50>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2207      	movs	r2, #7
 8002432:	401a      	ands	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002450:	2313      	movs	r3, #19
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002458:	2312      	movs	r3, #18
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800246c:	e0a3      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2011      	movs	r0, #17
 8002470:	183b      	adds	r3, r7, r0
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b86      	ldr	r3, [pc, #536]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	4013      	ands	r3, r2
 8002480:	d110      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b83      	ldr	r3, [pc, #524]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002486:	4b82      	ldr	r3, [pc, #520]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0549      	lsls	r1, r1, #21
 800248c:	430a      	orrs	r2, r1
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002490:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	055b      	lsls	r3, r3, #21
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a4:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0049      	lsls	r1, r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b2:	f7fe fb25 	bl	8000b00 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ba:	e00b      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7fe fb20 	bl	8000b00 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d904      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80024ca:	2313      	movs	r3, #19
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	2203      	movs	r2, #3
 80024d0:	701a      	strb	r2, [r3, #0]
        break;
 80024d2:	e005      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d4:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d0ed      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80024e0:	2313      	movs	r3, #19
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d154      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ea:	4b69      	ldr	r3, [pc, #420]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024ee:	23c0      	movs	r3, #192	; 0xc0
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d019      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	429a      	cmp	r2, r3
 8002504:	d014      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	4a63      	ldr	r2, [pc, #396]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800250c:	4013      	ands	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002510:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002514:	4b5e      	ldr	r3, [pc, #376]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	0249      	lsls	r1, r1, #9
 800251a:	430a      	orrs	r2, r1
 800251c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002524:	495d      	ldr	r1, [pc, #372]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002526:	400a      	ands	r2, r1
 8002528:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2201      	movs	r2, #1
 8002534:	4013      	ands	r3, r2
 8002536:	d016      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fae2 	bl	8000b00 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002540:	e00c      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fadd 	bl	8000b00 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d904      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002552:	2313      	movs	r3, #19
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
            break;
 800255a:	e004      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2202      	movs	r2, #2
 8002562:	4013      	ands	r3, r2
 8002564:	d0ed      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002566:	2313      	movs	r3, #19
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002570:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	4a48      	ldr	r2, [pc, #288]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002580:	430a      	orrs	r2, r1
 8002582:	65da      	str	r2, [r3, #92]	; 0x5c
 8002584:	e00c      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002586:	2312      	movs	r3, #18
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2213      	movs	r2, #19
 800258c:	18ba      	adds	r2, r7, r2
 800258e:	7812      	ldrb	r2, [r2, #0]
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e005      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	2312      	movs	r3, #18
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2213      	movs	r2, #19
 800259a:	18ba      	adds	r2, r7, r2
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a0:	2311      	movs	r3, #17
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025b0:	493c      	ldr	r1, [pc, #240]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c0:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	2203      	movs	r2, #3
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	220c      	movs	r2, #12
 80025e4:	4393      	bics	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	4013      	ands	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800260c:	430a      	orrs	r2, r1
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4013      	ands	r3, r2
 800261a:	d015      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	0899      	lsrs	r1, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800262a:	430a      	orrs	r2, r1
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	05db      	lsls	r3, r3, #23
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0249      	lsls	r1, r1, #9
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d016      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002664:	430a      	orrs	r2, r1
 8002666:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	01db      	lsls	r3, r3, #7
 8002670:	429a      	cmp	r2, r3
 8002672:	d106      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	0249      	lsls	r1, r1, #9
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002682:	2312      	movs	r3, #18
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b006      	add	sp, #24
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	fffffcff 	.word	0xfffffcff
 800269c:	fffeffff 	.word	0xfffeffff
 80026a0:	00001388 	.word	0x00001388
 80026a4:	efffffff 	.word	0xefffffff
 80026a8:	ffffcfff 	.word	0xffffcfff
 80026ac:	ffff3fff 	.word	0xffff3fff

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04a      	b.n	8002758 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	223d      	movs	r2, #61	; 0x3d
 80026c6:	5c9b      	ldrb	r3, [r3, r2]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223c      	movs	r2, #60	; 0x3c
 80026d2:	2100      	movs	r1, #0
 80026d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f841 	bl	8002760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223d      	movs	r2, #61	; 0x3d
 80026e2:	2102      	movs	r1, #2
 80026e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	0019      	movs	r1, r3
 80026f0:	0010      	movs	r0, r2
 80026f2:	f000 f9e5 	bl	8002ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2248      	movs	r2, #72	; 0x48
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	223e      	movs	r2, #62	; 0x3e
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	223f      	movs	r2, #63	; 0x3f
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2241      	movs	r2, #65	; 0x41
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2242      	movs	r2, #66	; 0x42
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2243      	movs	r2, #67	; 0x43
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2244      	movs	r2, #68	; 0x44
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2245      	movs	r2, #69	; 0x45
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2246      	movs	r2, #70	; 0x46
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2247      	movs	r2, #71	; 0x47
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	223d      	movs	r2, #61	; 0x3d
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	223d      	movs	r2, #61	; 0x3d
 800277c:	5c9b      	ldrb	r3, [r3, r2]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e03c      	b.n	8002802 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	223d      	movs	r2, #61	; 0x3d
 800278c:	2102      	movs	r1, #2
 800278e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_TIM_Base_Start_IT+0x9c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x4e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_Base_Start_IT+0xa0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x4e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_TIM_Base_Start_IT+0xa4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d116      	bne.n	80027ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_TIM_Base_Start_IT+0xa8>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d016      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x8e>
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d011      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	e008      	b.n	80027fe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2101      	movs	r1, #1
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e000      	b.n	8002800 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b004      	add	sp, #16
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40000400 	.word	0x40000400
 8002814:	40014000 	.word	0x40014000
 8002818:	00010007 	.word	0x00010007

0800281c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d124      	bne.n	800287c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d11d      	bne.n	800287c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2203      	movs	r2, #3
 8002846:	4252      	negs	r2, r2
 8002848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2203      	movs	r2, #3
 8002858:	4013      	ands	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f916 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 8002864:	e007      	b.n	8002876 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f909 	bl	8002a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f915 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2204      	movs	r2, #4
 8002884:	4013      	ands	r3, r2
 8002886:	2b04      	cmp	r3, #4
 8002888:	d125      	bne.n	80028d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	2b04      	cmp	r3, #4
 8002896:	d11e      	bne.n	80028d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2205      	movs	r2, #5
 800289e:	4252      	negs	r2, r2
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	23c0      	movs	r3, #192	; 0xc0
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 f8e9 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 80028be:	e007      	b.n	80028d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 f8dc 	bl	8002a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f8e8 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2208      	movs	r2, #8
 80028de:	4013      	ands	r3, r2
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d124      	bne.n	800292e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2208      	movs	r2, #8
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d11d      	bne.n	800292e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2209      	movs	r2, #9
 80028f8:	4252      	negs	r2, r2
 80028fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2204      	movs	r2, #4
 8002900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2203      	movs	r2, #3
 800290a:	4013      	ands	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f8bd 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 8002916:	e007      	b.n	8002928 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0018      	movs	r0, r3
 800291c:	f000 f8b0 	bl	8002a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f8bc 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	2b10      	cmp	r3, #16
 800293a:	d125      	bne.n	8002988 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2210      	movs	r2, #16
 8002944:	4013      	ands	r3, r2
 8002946:	2b10      	cmp	r3, #16
 8002948:	d11e      	bne.n	8002988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2211      	movs	r2, #17
 8002950:	4252      	negs	r2, r2
 8002952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2208      	movs	r2, #8
 8002958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	23c0      	movs	r3, #192	; 0xc0
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f890 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 8002970:	e007      	b.n	8002982 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f883 	bl	8002a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f88f 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2201      	movs	r2, #1
 8002990:	4013      	ands	r3, r2
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10f      	bne.n	80029b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	4013      	ands	r3, r2
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d108      	bne.n	80029b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2202      	movs	r2, #2
 80029aa:	4252      	negs	r2, r2
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7fd fec9 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	4013      	ands	r3, r2
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d10f      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b80      	cmp	r3, #128	; 0x80
 80029d0:	d108      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2281      	movs	r2, #129	; 0x81
 80029d8:	4252      	negs	r2, r2
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f8ec 	bl	8002bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	401a      	ands	r2, r3
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10e      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b80      	cmp	r3, #128	; 0x80
 8002a04:	d107      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_TIM_IRQHandler+0x260>)
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f8db 	bl	8002bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2240      	movs	r2, #64	; 0x40
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d10f      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d108      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2241      	movs	r2, #65	; 0x41
 8002a38:	4252      	negs	r2, r2
 8002a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f836 	bl	8002ab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d10f      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d108      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2221      	movs	r2, #33	; 0x21
 8002a66:	4252      	negs	r2, r2
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 f89d 	bl	8002bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	fffffeff 	.word	0xfffffeff

08002a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <TIM_Base_SetConfig+0xd0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x20>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a2e      	ldr	r2, [pc, #184]	; (8002b94 <TIM_Base_SetConfig+0xd4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2270      	movs	r2, #112	; 0x70
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <TIM_Base_SetConfig+0xd0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <TIM_Base_SetConfig+0xd4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00f      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <TIM_Base_SetConfig+0xd8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <TIM_Base_SetConfig+0xdc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <TIM_Base_SetConfig+0xe0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <TIM_Base_SetConfig+0xe4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <TIM_Base_SetConfig+0xe8>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	4393      	bics	r3, r2
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <TIM_Base_SetConfig+0xd0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0xba>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <TIM_Base_SetConfig+0xdc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0xba>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <TIM_Base_SetConfig+0xe0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0xba>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <TIM_Base_SetConfig+0xe4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d103      	bne.n	8002b82 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	615a      	str	r2, [r3, #20]
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40002000 	.word	0x40002000
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800
 8002ba8:	fffffcff 	.word	0xfffffcff

08002bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e046      	b.n	8002c7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2284      	movs	r2, #132	; 0x84
 8002bf2:	589b      	ldr	r3, [r3, r2]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7fd fe4a 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2284      	movs	r2, #132	; 0x84
 8002c0c:	2124      	movs	r1, #36	; 0x24
 8002c0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 f830 	bl	8002c88 <UART_SetConfig>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e024      	b.n	8002c7c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f9c7 	bl	8002fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	490d      	ldr	r1, [pc, #52]	; (8002c84 <HAL_UART_Init+0xa8>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	212a      	movs	r1, #42	; 0x2a
 8002c5e:	438a      	bics	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fa5f 	bl	8003138 <UART_CheckIdleState>
 8002c7a:	0003      	movs	r3, r0
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	ffffb7ff 	.word	0xffffb7ff

08002c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c90:	231a      	movs	r3, #26
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4abc      	ldr	r2, [pc, #752]	; (8002fa8 <UART_SetConfig+0x320>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4ab7      	ldr	r2, [pc, #732]	; (8002fac <UART_SetConfig+0x324>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4aae      	ldr	r2, [pc, #696]	; (8002fb0 <UART_SetConfig+0x328>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4aa4      	ldr	r2, [pc, #656]	; (8002fb4 <UART_SetConfig+0x32c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d127      	bne.n	8002d76 <UART_SetConfig+0xee>
 8002d26:	4ba4      	ldr	r3, [pc, #656]	; (8002fb8 <UART_SetConfig+0x330>)
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d017      	beq.n	8002d62 <UART_SetConfig+0xda>
 8002d32:	d81b      	bhi.n	8002d6c <UART_SetConfig+0xe4>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d00a      	beq.n	8002d4e <UART_SetConfig+0xc6>
 8002d38:	d818      	bhi.n	8002d6c <UART_SetConfig+0xe4>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <UART_SetConfig+0xbc>
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d00a      	beq.n	8002d58 <UART_SetConfig+0xd0>
 8002d42:	e013      	b.n	8002d6c <UART_SetConfig+0xe4>
 8002d44:	231b      	movs	r3, #27
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e058      	b.n	8002e00 <UART_SetConfig+0x178>
 8002d4e:	231b      	movs	r3, #27
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	2202      	movs	r2, #2
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e053      	b.n	8002e00 <UART_SetConfig+0x178>
 8002d58:	231b      	movs	r3, #27
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e04e      	b.n	8002e00 <UART_SetConfig+0x178>
 8002d62:	231b      	movs	r3, #27
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2208      	movs	r2, #8
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e049      	b.n	8002e00 <UART_SetConfig+0x178>
 8002d6c:	231b      	movs	r3, #27
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2210      	movs	r2, #16
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e044      	b.n	8002e00 <UART_SetConfig+0x178>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <UART_SetConfig+0x334>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d127      	bne.n	8002dd0 <UART_SetConfig+0x148>
 8002d80:	4b8d      	ldr	r3, [pc, #564]	; (8002fb8 <UART_SetConfig+0x330>)
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	220c      	movs	r2, #12
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d017      	beq.n	8002dbc <UART_SetConfig+0x134>
 8002d8c:	d81b      	bhi.n	8002dc6 <UART_SetConfig+0x13e>
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d00a      	beq.n	8002da8 <UART_SetConfig+0x120>
 8002d92:	d818      	bhi.n	8002dc6 <UART_SetConfig+0x13e>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <UART_SetConfig+0x116>
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00a      	beq.n	8002db2 <UART_SetConfig+0x12a>
 8002d9c:	e013      	b.n	8002dc6 <UART_SetConfig+0x13e>
 8002d9e:	231b      	movs	r3, #27
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e02b      	b.n	8002e00 <UART_SetConfig+0x178>
 8002da8:	231b      	movs	r3, #27
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e026      	b.n	8002e00 <UART_SetConfig+0x178>
 8002db2:	231b      	movs	r3, #27
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2204      	movs	r2, #4
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e021      	b.n	8002e00 <UART_SetConfig+0x178>
 8002dbc:	231b      	movs	r3, #27
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e01c      	b.n	8002e00 <UART_SetConfig+0x178>
 8002dc6:	231b      	movs	r3, #27
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2210      	movs	r2, #16
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e017      	b.n	8002e00 <UART_SetConfig+0x178>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <UART_SetConfig+0x338>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d104      	bne.n	8002de4 <UART_SetConfig+0x15c>
 8002dda:	231b      	movs	r3, #27
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e00d      	b.n	8002e00 <UART_SetConfig+0x178>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a76      	ldr	r2, [pc, #472]	; (8002fc4 <UART_SetConfig+0x33c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d104      	bne.n	8002df8 <UART_SetConfig+0x170>
 8002dee:	231b      	movs	r3, #27
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e003      	b.n	8002e00 <UART_SetConfig+0x178>
 8002df8:	231b      	movs	r3, #27
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d000      	beq.n	8002e0e <UART_SetConfig+0x186>
 8002e0c:	e065      	b.n	8002eda <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002e0e:	231b      	movs	r3, #27
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d015      	beq.n	8002e44 <UART_SetConfig+0x1bc>
 8002e18:	dc18      	bgt.n	8002e4c <UART_SetConfig+0x1c4>
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d00d      	beq.n	8002e3a <UART_SetConfig+0x1b2>
 8002e1e:	dc15      	bgt.n	8002e4c <UART_SetConfig+0x1c4>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <UART_SetConfig+0x1a2>
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d005      	beq.n	8002e34 <UART_SetConfig+0x1ac>
 8002e28:	e010      	b.n	8002e4c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2a:	f7ff facd 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	617b      	str	r3, [r7, #20]
        break;
 8002e32:	e012      	b.n	8002e5a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e34:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <UART_SetConfig+0x340>)
 8002e36:	617b      	str	r3, [r7, #20]
        break;
 8002e38:	e00f      	b.n	8002e5a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3a:	f7ff fa39 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	617b      	str	r3, [r7, #20]
        break;
 8002e42:	e00a      	b.n	8002e5a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	617b      	str	r3, [r7, #20]
        break;
 8002e4a:	e006      	b.n	8002e5a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e50:	231a      	movs	r3, #26
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
        break;
 8002e58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d100      	bne.n	8002e62 <UART_SetConfig+0x1da>
 8002e60:	e08d      	b.n	8002f7e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e66:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <UART_SetConfig+0x344>)
 8002e68:	0052      	lsls	r2, r2, #1
 8002e6a:	5ad3      	ldrh	r3, [r2, r3]
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7fd f94a 	bl	8000108 <__udivsi3>
 8002e74:	0003      	movs	r3, r0
 8002e76:	005a      	lsls	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	18d2      	adds	r2, r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0019      	movs	r1, r3
 8002e86:	0010      	movs	r0, r2
 8002e88:	f7fd f93e 	bl	8000108 <__udivsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d91c      	bls.n	8002ed0 <UART_SetConfig+0x248>
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	025b      	lsls	r3, r3, #9
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d217      	bcs.n	8002ed0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	200e      	movs	r0, #14
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	210f      	movs	r1, #15
 8002eaa:	438a      	bics	r2, r1
 8002eac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b299      	uxth	r1, r3
 8002eba:	183b      	adds	r3, r7, r0
 8002ebc:	183a      	adds	r2, r7, r0
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	183a      	adds	r2, r7, r0
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e056      	b.n	8002f7e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed0:	231a      	movs	r3, #26
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e051      	b.n	8002f7e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eda:	231b      	movs	r3, #27
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d015      	beq.n	8002f10 <UART_SetConfig+0x288>
 8002ee4:	dc18      	bgt.n	8002f18 <UART_SetConfig+0x290>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00d      	beq.n	8002f06 <UART_SetConfig+0x27e>
 8002eea:	dc15      	bgt.n	8002f18 <UART_SetConfig+0x290>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <UART_SetConfig+0x26e>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d005      	beq.n	8002f00 <UART_SetConfig+0x278>
 8002ef4:	e010      	b.n	8002f18 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef6:	f7ff fa67 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8002efa:	0003      	movs	r3, r0
 8002efc:	617b      	str	r3, [r7, #20]
        break;
 8002efe:	e012      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <UART_SetConfig+0x340>)
 8002f02:	617b      	str	r3, [r7, #20]
        break;
 8002f04:	e00f      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f06:	f7ff f9d3 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	617b      	str	r3, [r7, #20]
        break;
 8002f0e:	e00a      	b.n	8002f26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	617b      	str	r3, [r7, #20]
        break;
 8002f16:	e006      	b.n	8002f26 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f1c:	231a      	movs	r3, #26
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
        break;
 8002f24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d028      	beq.n	8002f7e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f30:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <UART_SetConfig+0x344>)
 8002f32:	0052      	lsls	r2, r2, #1
 8002f34:	5ad3      	ldrh	r3, [r2, r3]
 8002f36:	0019      	movs	r1, r3
 8002f38:	6978      	ldr	r0, [r7, #20]
 8002f3a:	f7fd f8e5 	bl	8000108 <__udivsi3>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	001a      	movs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	18d2      	adds	r2, r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0019      	movs	r1, r3
 8002f50:	0010      	movs	r0, r2
 8002f52:	f7fd f8d9 	bl	8000108 <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b0f      	cmp	r3, #15
 8002f5e:	d90a      	bls.n	8002f76 <UART_SetConfig+0x2ee>
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	025b      	lsls	r3, r3, #9
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d205      	bcs.n	8002f76 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	e003      	b.n	8002f7e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002f76:	231a      	movs	r3, #26
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	226a      	movs	r2, #106	; 0x6a
 8002f82:	2101      	movs	r1, #1
 8002f84:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2268      	movs	r2, #104	; 0x68
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002f9a:	231a      	movs	r3, #26
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b008      	add	sp, #32
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	cfff69f3 	.word	0xcfff69f3
 8002fac:	ffffcfff 	.word	0xffffcfff
 8002fb0:	11fff4ff 	.word	0x11fff4ff
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	40004800 	.word	0x40004800
 8002fc4:	40004c00 	.word	0x40004c00
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	08004790 	.word	0x08004790

08002fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <UART_AdvFeatureConfig+0x144>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d00b      	beq.n	800301c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a43      	ldr	r2, [pc, #268]	; (8003118 <UART_AdvFeatureConfig+0x148>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2204      	movs	r2, #4
 8003022:	4013      	ands	r3, r2
 8003024:	d00b      	beq.n	800303e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <UART_AdvFeatureConfig+0x14c>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	2208      	movs	r2, #8
 8003044:	4013      	ands	r3, r2
 8003046:	d00b      	beq.n	8003060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <UART_AdvFeatureConfig+0x150>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2210      	movs	r2, #16
 8003066:	4013      	ands	r3, r2
 8003068:	d00b      	beq.n	8003082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <UART_AdvFeatureConfig+0x154>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	2220      	movs	r2, #32
 8003088:	4013      	ands	r3, r2
 800308a:	d00b      	beq.n	80030a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <UART_AdvFeatureConfig+0x158>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	2240      	movs	r2, #64	; 0x40
 80030aa:	4013      	ands	r3, r2
 80030ac:	d01d      	beq.n	80030ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <UART_AdvFeatureConfig+0x15c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	035b      	lsls	r3, r3, #13
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d10b      	bne.n	80030ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <UART_AdvFeatureConfig+0x160>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00b      	beq.n	800310c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <UART_AdvFeatureConfig+0x164>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fffdffff 	.word	0xfffdffff
 8003118:	fffeffff 	.word	0xfffeffff
 800311c:	fffbffff 	.word	0xfffbffff
 8003120:	ffff7fff 	.word	0xffff7fff
 8003124:	ffffefff 	.word	0xffffefff
 8003128:	ffffdfff 	.word	0xffffdfff
 800312c:	ffefffff 	.word	0xffefffff
 8003130:	ff9fffff 	.word	0xff9fffff
 8003134:	fff7ffff 	.word	0xfff7ffff

08003138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	228c      	movs	r2, #140	; 0x8c
 8003144:	2100      	movs	r1, #0
 8003146:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003148:	f7fd fcda 	bl	8000b00 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2208      	movs	r2, #8
 8003158:	4013      	ands	r3, r2
 800315a:	2b08      	cmp	r3, #8
 800315c:	d10c      	bne.n	8003178 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	0391      	lsls	r1, r2, #14
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <UART_CheckIdleState+0x90>)
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	f000 f82e 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e023      	b.n	80031c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2204      	movs	r2, #4
 8003180:	4013      	ands	r3, r2
 8003182:	2b04      	cmp	r3, #4
 8003184:	d10c      	bne.n	80031a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d1      	lsls	r1, r2, #15
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <UART_CheckIdleState+0x90>)
 8003190:	9200      	str	r2, [sp, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	f000 f81a 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d001      	beq.n	80031a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e00f      	b.n	80031c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2284      	movs	r2, #132	; 0x84
 80031a4:	2120      	movs	r1, #32
 80031a6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2288      	movs	r2, #136	; 0x88
 80031ac:	2120      	movs	r1, #32
 80031ae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b004      	add	sp, #16
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	01ffffff 	.word	0x01ffffff

080031cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b094      	sub	sp, #80	; 0x50
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031dc:	e0a7      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e0:	3301      	adds	r3, #1
 80031e2:	d100      	bne.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80031e4:	e0a3      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fd fc8b 	bl	8000b00 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <UART_WaitOnFlagUntilTimeout+0x30>
 80031f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d13f      	bne.n	800327c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003204:	647b      	str	r3, [r7, #68]	; 0x44
 8003206:	2301      	movs	r3, #1
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	494e      	ldr	r1, [pc, #312]	; (8003358 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800321e:	400a      	ands	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322e:	f3ef 8310 	mrs	r3, PRIMASK
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
 8003238:	2301      	movs	r3, #1
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	438a      	bics	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2284      	movs	r2, #132	; 0x84
 8003264:	2120      	movs	r1, #32
 8003266:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2288      	movs	r2, #136	; 0x88
 800326c:	2120      	movs	r1, #32
 800326e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e069      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2204      	movs	r2, #4
 8003284:	4013      	ands	r3, r2
 8003286:	d052      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	401a      	ands	r2, r3
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	429a      	cmp	r2, r3
 800329a:	d148      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a6:	f3ef 8310 	mrs	r3, PRIMASK
 80032aa:	613b      	str	r3, [r7, #16]
  return(result);
 80032ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	2301      	movs	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4924      	ldr	r1, [pc, #144]	; (8003358 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f383 8810 	msr	PRIMASK, r3
}
 80032d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d8:	f3ef 8310 	mrs	r3, PRIMASK
 80032dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80032de:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e2:	2301      	movs	r3, #1
 80032e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	438a      	bics	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2284      	movs	r2, #132	; 0x84
 800330e:	2120      	movs	r1, #32
 8003310:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2288      	movs	r2, #136	; 0x88
 8003316:	2120      	movs	r1, #32
 8003318:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	228c      	movs	r2, #140	; 0x8c
 800331e:	2120      	movs	r1, #32
 8003320:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e010      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	425a      	negs	r2, r3
 800333e:	4153      	adcs	r3, r2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	001a      	movs	r2, r3
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d100      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x182>
 800334c:	e747      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b014      	add	sp, #80	; 0x50
 8003356:	bd80      	pop	{r7, pc}
 8003358:	fffffe5f 	.word	0xfffffe5f

0800335c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_UARTEx_DisableFifoMode+0x16>
 800336e:	2302      	movs	r3, #2
 8003370:	e027      	b.n	80033c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2284      	movs	r2, #132	; 0x84
 800337e:	2124      	movs	r1, #36	; 0x24
 8003380:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2101      	movs	r1, #1
 8003396:	438a      	bics	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2284      	movs	r2, #132	; 0x84
 80033b4:	2120      	movs	r1, #32
 80033b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	dfffffff 	.word	0xdfffffff

080033d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e02e      	b.n	8003446 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	2101      	movs	r1, #1
 80033ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2284      	movs	r2, #132	; 0x84
 80033f4:	2124      	movs	r1, #36	; 0x24
 80033f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	438a      	bics	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	08d9      	lsrs	r1, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f854 	bl	80034d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2284      	movs	r2, #132	; 0x84
 8003438:	2120      	movs	r1, #32
 800343a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	5c9b      	ldrb	r3, [r3, r2]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003464:	2302      	movs	r3, #2
 8003466:	e02f      	b.n	80034c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	2101      	movs	r1, #1
 800346e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2284      	movs	r2, #132	; 0x84
 8003474:	2124      	movs	r1, #36	; 0x24
 8003476:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	438a      	bics	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f813 	bl	80034d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2284      	movs	r2, #132	; 0x84
 80034ba:	2120      	movs	r1, #32
 80034bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	f1ffffff 	.word	0xf1ffffff

080034d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	226a      	movs	r2, #106	; 0x6a
 80034e8:	2101      	movs	r1, #1
 80034ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2268      	movs	r2, #104	; 0x68
 80034f0:	2101      	movs	r1, #1
 80034f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034f4:	e043      	b.n	800357e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034f6:	260f      	movs	r6, #15
 80034f8:	19bb      	adds	r3, r7, r6
 80034fa:	2208      	movs	r2, #8
 80034fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034fe:	200e      	movs	r0, #14
 8003500:	183b      	adds	r3, r7, r0
 8003502:	2208      	movs	r2, #8
 8003504:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	0e5b      	lsrs	r3, r3, #25
 800350e:	b2da      	uxtb	r2, r3
 8003510:	240d      	movs	r4, #13
 8003512:	193b      	adds	r3, r7, r4
 8003514:	2107      	movs	r1, #7
 8003516:	400a      	ands	r2, r1
 8003518:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	0f5b      	lsrs	r3, r3, #29
 8003522:	b2da      	uxtb	r2, r3
 8003524:	250c      	movs	r5, #12
 8003526:	197b      	adds	r3, r7, r5
 8003528:	2107      	movs	r1, #7
 800352a:	400a      	ands	r2, r1
 800352c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800352e:	183b      	adds	r3, r7, r0
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	197a      	adds	r2, r7, r5
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	4914      	ldr	r1, [pc, #80]	; (8003588 <UARTEx_SetNbDataToProcess+0xb4>)
 8003538:	5c8a      	ldrb	r2, [r1, r2]
 800353a:	435a      	muls	r2, r3
 800353c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800353e:	197b      	adds	r3, r7, r5
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <UARTEx_SetNbDataToProcess+0xb8>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003546:	0019      	movs	r1, r3
 8003548:	f7fc fe68 	bl	800021c <__divsi3>
 800354c:	0003      	movs	r3, r0
 800354e:	b299      	uxth	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	226a      	movs	r2, #106	; 0x6a
 8003554:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003556:	19bb      	adds	r3, r7, r6
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	193a      	adds	r2, r7, r4
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	490a      	ldr	r1, [pc, #40]	; (8003588 <UARTEx_SetNbDataToProcess+0xb4>)
 8003560:	5c8a      	ldrb	r2, [r1, r2]
 8003562:	435a      	muls	r2, r3
 8003564:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003566:	193b      	adds	r3, r7, r4
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <UARTEx_SetNbDataToProcess+0xb8>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800356e:	0019      	movs	r1, r3
 8003570:	f7fc fe54 	bl	800021c <__divsi3>
 8003574:	0003      	movs	r3, r0
 8003576:	b299      	uxth	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2268      	movs	r2, #104	; 0x68
 800357c:	5299      	strh	r1, [r3, r2]
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b005      	add	sp, #20
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	080047a8 	.word	0x080047a8
 800358c:	080047b0 	.word	0x080047b0

08003590 <readDeviceName>:
#include "Gyro_l3g4200.h"
uint8_t readDeviceName(I2C_HandleTypeDef *_hi2c_config)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af04      	add	r7, sp, #16
 8003596:	6078      	str	r0, [r7, #4]
	uint8_t _pData[1];
	HAL_I2C_Mem_Read(_hi2c_config, DIVICE_I2C_ADR, DEVICE_NAME, I2C_MEMADD_SIZE_8BIT, _pData, 1, 0xFF);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	23ff      	movs	r3, #255	; 0xff
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	2301      	movs	r3, #1
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	240c      	movs	r4, #12
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2301      	movs	r3, #1
 80035aa:	220f      	movs	r2, #15
 80035ac:	2169      	movs	r1, #105	; 0x69
 80035ae:	f7fd fdcb 	bl	8001148 <HAL_I2C_Mem_Read>
	return _pData[0];
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	781b      	ldrb	r3, [r3, #0]
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b005      	add	sp, #20
 80035bc:	bd90      	pop	{r4, r7, pc}
	...

080035c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <SysTick_Handler+0x1c>)
 80035c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035c8:	f000 fd2c 	bl	8004024 <xTaskGetSchedulerState>
 80035cc:	0003      	movs	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035d2:	f000 fe49 	bl	8004268 <xPortSysTickHandler>
  }
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e6:	f3ef 8305 	mrs	r3, IPSR
 80035ea:	603b      	str	r3, [r7, #0]
  return(result);
 80035ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80035f2:	2306      	movs	r3, #6
 80035f4:	425b      	negs	r3, r3
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	e00c      	b.n	8003614 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <osKernelInitialize+0x40>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <osKernelInitialize+0x40>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003608:	2300      	movs	r3, #0
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e002      	b.n	8003614 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800360e:	2301      	movs	r3, #1
 8003610:	425b      	negs	r3, r3
 8003612:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003614:	687b      	ldr	r3, [r7, #4]
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	2000002c 	.word	0x2000002c

08003624 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003624:	b5b0      	push	{r4, r5, r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af04      	add	r7, sp, #16
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003634:	f3ef 8305 	mrs	r3, IPSR
 8003638:	617b      	str	r3, [r7, #20]
  return(result);
 800363a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800363c:	2b00      	cmp	r3, #0
 800363e:	d000      	beq.n	8003642 <osThreadNew+0x1e>
 8003640:	e081      	b.n	8003746 <osThreadNew+0x122>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d100      	bne.n	800364a <osThreadNew+0x26>
 8003648:	e07d      	b.n	8003746 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800364e:	2318      	movs	r3, #24
 8003650:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003656:	2301      	movs	r3, #1
 8003658:	425b      	negs	r3, r3
 800365a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d044      	beq.n	80036ec <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <osThreadNew+0x4c>
        name = attr->name;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <osThreadNew+0x70>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b38      	cmp	r3, #56	; 0x38
 8003688:	d804      	bhi.n	8003694 <osThreadNew+0x70>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	4013      	ands	r3, r2
 8003692:	d001      	beq.n	8003698 <osThreadNew+0x74>
        return (NULL);
 8003694:	2300      	movs	r3, #0
 8003696:	e057      	b.n	8003748 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <osThreadNew+0xaa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b5b      	cmp	r3, #91	; 0x5b
 80036b6:	d90a      	bls.n	80036ce <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <osThreadNew+0xaa>
        mem = 1;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e010      	b.n	80036f0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <osThreadNew+0xcc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <osThreadNew+0xcc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <osThreadNew+0xcc>
          mem = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e001      	b.n	80036f0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d112      	bne.n	800371c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036fe:	68bd      	ldr	r5, [r7, #8]
 8003700:	6a3c      	ldr	r4, [r7, #32]
 8003702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	9201      	str	r2, [sp, #4]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	002b      	movs	r3, r5
 8003710:	0022      	movs	r2, r4
 8003712:	f000 f8e2 	bl	80038da <xTaskCreateStatic>
 8003716:	0003      	movs	r3, r0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	e014      	b.n	8003746 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d111      	bne.n	8003746 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	b29a      	uxth	r2, r3
 8003726:	68bc      	ldr	r4, [r7, #8]
 8003728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	2310      	movs	r3, #16
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	0023      	movs	r3, r4
 8003738:	f000 f913 	bl	8003962 <xTaskCreate>
 800373c:	0003      	movs	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <osThreadNew+0x122>
            hTask = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003746:	693b      	ldr	r3, [r7, #16]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b00a      	add	sp, #40	; 0x28
 800374e:	bdb0      	pop	{r4, r5, r7, pc}

08003750 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	60bb      	str	r3, [r7, #8]
  return(result);
 800375e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <osDelay+0x1c>
    stat = osErrorISR;
 8003764:	2306      	movs	r3, #6
 8003766:	425b      	negs	r3, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e008      	b.n	800377e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <osDelay+0x2e>
      vTaskDelay(ticks);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fa31 	bl	8003be0 <vTaskDelay>
    }
  }

  return (stat);
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b004      	add	sp, #16
 8003786:	bd80      	pop	{r7, pc}

08003788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3308      	adds	r3, #8
 8003794:	001a      	movs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	4252      	negs	r2, r2
 80037a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3308      	adds	r3, #8
 80037a6:	001a      	movs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3308      	adds	r3, #8
 80037b0:	001a      	movs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b002      	add	sp, #8
 80037d8:	bd80      	pop	{r7, pc}

080037da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}

0800381e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3301      	adds	r3, #1
 8003832:	d103      	bne.n	800383c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e00c      	b.n	8003856 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3308      	adds	r3, #8
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e002      	b.n	800384a <vListInsert+0x2c>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d2f6      	bcs.n	8003844 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}

0800388a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d103      	bne.n	80038be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	1e5a      	subs	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}

080038da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038da:	b590      	push	{r4, r7, lr}
 80038dc:	b08d      	sub	sp, #52	; 0x34
 80038de:	af04      	add	r7, sp, #16
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <xTaskCreateStatic+0x18>
 80038ee:	b672      	cpsid	i
 80038f0:	e7fe      	b.n	80038f0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <xTaskCreateStatic+0x22>
 80038f8:	b672      	cpsid	i
 80038fa:	e7fe      	b.n	80038fa <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038fc:	235c      	movs	r3, #92	; 0x5c
 80038fe:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b5c      	cmp	r3, #92	; 0x5c
 8003904:	d001      	beq.n	800390a <xTaskCreateStatic+0x30>
 8003906:	b672      	cpsid	i
 8003908:	e7fe      	b.n	8003908 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800390a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <xTaskCreateStatic+0x7a>
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01d      	beq.n	8003954 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003920:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2259      	movs	r2, #89	; 0x59
 8003926:	2102      	movs	r1, #2
 8003928:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800392a:	683c      	ldr	r4, [r7, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	2300      	movs	r3, #0
 8003934:	9303      	str	r3, [sp, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	9302      	str	r3, [sp, #8]
 800393a:	2318      	movs	r3, #24
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	0023      	movs	r3, r4
 8003946:	f000 f859 	bl	80039fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	0018      	movs	r0, r3
 800394e:	f000 f8df 	bl	8003b10 <prvAddNewTaskToReadyList>
 8003952:	e001      	b.n	8003958 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003958:	69bb      	ldr	r3, [r7, #24]
	}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b009      	add	sp, #36	; 0x24
 8003960:	bd90      	pop	{r4, r7, pc}

08003962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003962:	b590      	push	{r4, r7, lr}
 8003964:	b08d      	sub	sp, #52	; 0x34
 8003966:	af04      	add	r7, sp, #16
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	1dbb      	adds	r3, r7, #6
 8003970:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003972:	1dbb      	adds	r3, r7, #6
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	0018      	movs	r0, r3
 800397a:	f000 fc8f 	bl	800429c <pvPortMalloc>
 800397e:	0003      	movs	r3, r0
 8003980:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d010      	beq.n	80039aa <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003988:	205c      	movs	r0, #92	; 0x5c
 800398a:	f000 fc87 	bl	800429c <pvPortMalloc>
 800398e:	0003      	movs	r3, r0
 8003990:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
 800399e:	e006      	b.n	80039ae <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 fd26 	bl	80043f4 <vPortFree>
 80039a8:	e001      	b.n	80039ae <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01a      	beq.n	80039ea <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2259      	movs	r2, #89	; 0x59
 80039b8:	2100      	movs	r1, #0
 80039ba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	683c      	ldr	r4, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9303      	str	r3, [sp, #12]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	9302      	str	r3, [sp, #8]
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	0023      	movs	r3, r4
 80039d8:	f000 f810 	bl	80039fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 f896 	bl	8003b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039e4:	2301      	movs	r3, #1
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e002      	b.n	80039f0 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039ea:	2301      	movs	r3, #1
 80039ec:	425b      	negs	r3, r3
 80039ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039f0:	69bb      	ldr	r3, [r7, #24]
	}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b009      	add	sp, #36	; 0x24
 80039f8:	bd90      	pop	{r4, r7, pc}
	...

080039fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	001a      	movs	r2, r3
 8003a14:	21a5      	movs	r1, #165	; 0xa5
 8003a16:	f000 fe17 	bl	8004648 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	493a      	ldr	r1, [pc, #232]	; (8003b0c <prvInitialiseNewTask+0x110>)
 8003a22:	468c      	mov	ip, r1
 8003a24:	4463      	add	r3, ip
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2207      	movs	r2, #7
 8003a30:	4393      	bics	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2207      	movs	r2, #7
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d001      	beq.n	8003a40 <prvInitialiseNewTask+0x44>
 8003a3c:	b672      	cpsid	i
 8003a3e:	e7fe      	b.n	8003a3e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e013      	b.n	8003a74 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	18d3      	adds	r3, r2, r3
 8003a52:	7818      	ldrb	r0, [r3, #0]
 8003a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a56:	2134      	movs	r1, #52	; 0x34
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	18d3      	adds	r3, r2, r3
 8003a5c:	185b      	adds	r3, r3, r1
 8003a5e:	1c02      	adds	r2, r0, #0
 8003a60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	18d3      	adds	r3, r2, r3
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	d9e8      	bls.n	8003a4c <prvInitialiseNewTask+0x50>
 8003a7a:	e000      	b.n	8003a7e <prvInitialiseNewTask+0x82>
			{
				break;
 8003a7c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	2243      	movs	r2, #67	; 0x43
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]
 8003a86:	e003      	b.n	8003a90 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2234      	movs	r2, #52	; 0x34
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	2b37      	cmp	r3, #55	; 0x37
 8003a94:	d901      	bls.n	8003a9a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a96:	2337      	movs	r3, #55	; 0x37
 8003a98:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	3304      	adds	r3, #4
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fe87 	bl	80037c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	3318      	adds	r3, #24
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7ff fe82 	bl	80037c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2238      	movs	r2, #56	; 0x38
 8003aca:	1ad2      	subs	r2, r2, r3
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2200      	movs	r2, #0
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	2258      	movs	r2, #88	; 0x58
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fb0a 	bl	8004104 <pxPortInitialiseStack>
 8003af0:	0002      	movs	r2, r0
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b006      	add	sp, #24
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	3fffffff 	.word	0x3fffffff

08003b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b18:	f000 fb4c 	bl	80041b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <prvAddNewTaskToReadyList+0xb8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <prvAddNewTaskToReadyList+0xb8>)
 8003b24:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b2e:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <prvAddNewTaskToReadyList+0xb8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d110      	bne.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b3c:	f000 fa10 	bl	8003f60 <prvInitialiseTaskLists>
 8003b40:	e00d      	b.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <prvAddNewTaskToReadyList+0xc0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d802      	bhi.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <prvAddNewTaskToReadyList+0xc4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <prvAddNewTaskToReadyList+0xc4>)
 8003b66:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <prvAddNewTaskToReadyList+0xc4>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <prvAddNewTaskToReadyList+0xc8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d903      	bls.n	8003b84 <prvAddNewTaskToReadyList+0x74>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <prvAddNewTaskToReadyList+0xc8>)
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	0013      	movs	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <prvAddNewTaskToReadyList+0xcc>)
 8003b92:	189a      	adds	r2, r3, r2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	0019      	movs	r1, r3
 8003b9a:	0010      	movs	r0, r2
 8003b9c:	f7ff fe1d 	bl	80037da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ba0:	f000 fb1a 	bl	80041d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <prvAddNewTaskToReadyList+0xc0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d201      	bcs.n	8003bbe <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bba:	f000 faeb 	bl	8004194 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	20000500 	.word	0x20000500
 8003bcc:	20000030 	.word	0x20000030
 8003bd0:	2000050c 	.word	0x2000050c
 8003bd4:	2000051c 	.word	0x2000051c
 8003bd8:	20000508 	.word	0x20000508
 8003bdc:	20000034 	.word	0x20000034

08003be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <vTaskDelay+0x48>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <vTaskDelay+0x1e>
 8003bfa:	b672      	cpsid	i
 8003bfc:	e7fe      	b.n	8003bfc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003bfe:	f000 f815 	bl	8003c2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2100      	movs	r1, #0
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 fa28 	bl	800405c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c0c:	f000 f81a 	bl	8003c44 <xTaskResumeAll>
 8003c10:	0003      	movs	r3, r0
 8003c12:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003c1a:	f000 fabb 	bl	8004194 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000524 	.word	0x20000524

08003c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <vTaskSuspendAll+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <vTaskSuspendAll+0x14>)
 8003c38:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000524 	.word	0x20000524

08003c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c52:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <xTaskResumeAll+0xf8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xTaskResumeAll+0x1a>
 8003c5a:	b672      	cpsid	i
 8003c5c:	e7fe      	b.n	8003c5c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c5e:	f000 faa9 	bl	80041b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <xTaskResumeAll+0xf8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1e5a      	subs	r2, r3, #1
 8003c68:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <xTaskResumeAll+0xf8>)
 8003c6a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6c:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <xTaskResumeAll+0xf8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d15b      	bne.n	8003d2c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <xTaskResumeAll+0xfc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d057      	beq.n	8003d2c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7c:	e02f      	b.n	8003cde <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <xTaskResumeAll+0x100>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff fdfd 	bl	800388a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3304      	adds	r3, #4
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff fdf8 	bl	800388a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <xTaskResumeAll+0x104>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d903      	bls.n	8003cae <xTaskResumeAll+0x6a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <xTaskResumeAll+0x104>)
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4a24      	ldr	r2, [pc, #144]	; (8003d4c <xTaskResumeAll+0x108>)
 8003cbc:	189a      	adds	r2, r3, r2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f7ff fd88 	bl	80037da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <xTaskResumeAll+0x10c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <xTaskResumeAll+0x110>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <xTaskResumeAll+0x100>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1cb      	bne.n	8003c7e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cec:	f000 f97c 	bl	8003fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <xTaskResumeAll+0x114>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00f      	beq.n	8003d1c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cfc:	f000 f82e 	bl	8003d5c <xTaskIncrementTick>
 8003d00:	1e03      	subs	r3, r0, #0
 8003d02:	d002      	beq.n	8003d0a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <xTaskResumeAll+0x110>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f2      	bne.n	8003cfc <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <xTaskResumeAll+0x114>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <xTaskResumeAll+0x110>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d28:	f000 fa34 	bl	8004194 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d2c:	f000 fa54 	bl	80041d8 <vPortExitCritical>

	return xAlreadyYielded;
 8003d30:	68bb      	ldr	r3, [r7, #8]
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	20000524 	.word	0x20000524
 8003d40:	20000500 	.word	0x20000500
 8003d44:	200004c4 	.word	0x200004c4
 8003d48:	20000508 	.word	0x20000508
 8003d4c:	20000034 	.word	0x20000034
 8003d50:	20000030 	.word	0x20000030
 8003d54:	20000514 	.word	0x20000514
 8003d58:	20000510 	.word	0x20000510

08003d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <xTaskIncrementTick+0x134>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d000      	beq.n	8003d70 <xTaskIncrementTick+0x14>
 8003d6e:	e084      	b.n	8003e7a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d70:	4b48      	ldr	r3, [pc, #288]	; (8003e94 <xTaskIncrementTick+0x138>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <xTaskIncrementTick+0x138>)
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d117      	bne.n	8003db4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d84:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <xTaskIncrementTick+0x13c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <xTaskIncrementTick+0x36>
 8003d8e:	b672      	cpsid	i
 8003d90:	e7fe      	b.n	8003d90 <xTaskIncrementTick+0x34>
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <xTaskIncrementTick+0x13c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <xTaskIncrementTick+0x140>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <xTaskIncrementTick+0x13c>)
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <xTaskIncrementTick+0x140>)
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <xTaskIncrementTick+0x144>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <xTaskIncrementTick+0x144>)
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f000 f91a 	bl	8003fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <xTaskIncrementTick+0x148>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d349      	bcc.n	8003e52 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <xTaskIncrementTick+0x13c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <xTaskIncrementTick+0x148>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4252      	negs	r2, r2
 8003dce:	601a      	str	r2, [r3, #0]
					break;
 8003dd0:	e03f      	b.n	8003e52 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <xTaskIncrementTick+0x13c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d203      	bcs.n	8003df2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <xTaskIncrementTick+0x148>)
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003df0:	e02f      	b.n	8003e52 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3304      	adds	r3, #4
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff fd47 	bl	800388a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3318      	adds	r3, #24
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff fd3e 	bl	800388a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <xTaskIncrementTick+0x14c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d903      	bls.n	8003e22 <xTaskIncrementTick+0xc6>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <xTaskIncrementTick+0x14c>)
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	0013      	movs	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <xTaskIncrementTick+0x150>)
 8003e30:	189a      	adds	r2, r3, r2
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3304      	adds	r3, #4
 8003e36:	0019      	movs	r1, r3
 8003e38:	0010      	movs	r0, r2
 8003e3a:	f7ff fcce 	bl	80037da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <xTaskIncrementTick+0x154>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d3b8      	bcc.n	8003dbe <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e50:	e7b5      	b.n	8003dbe <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <xTaskIncrementTick+0x154>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	4914      	ldr	r1, [pc, #80]	; (8003eac <xTaskIncrementTick+0x150>)
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	585b      	ldr	r3, [r3, r1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d901      	bls.n	8003e6c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <xTaskIncrementTick+0x158>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e004      	b.n	8003e84 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <xTaskIncrementTick+0x15c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <xTaskIncrementTick+0x15c>)
 8003e82:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e84:	697b      	ldr	r3, [r7, #20]
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b006      	add	sp, #24
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000524 	.word	0x20000524
 8003e94:	20000504 	.word	0x20000504
 8003e98:	200004bc 	.word	0x200004bc
 8003e9c:	200004c0 	.word	0x200004c0
 8003ea0:	20000518 	.word	0x20000518
 8003ea4:	20000520 	.word	0x20000520
 8003ea8:	20000508 	.word	0x20000508
 8003eac:	20000034 	.word	0x20000034
 8003eb0:	20000030 	.word	0x20000030
 8003eb4:	20000514 	.word	0x20000514
 8003eb8:	20000510 	.word	0x20000510

08003ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <vTaskSwitchContext+0x90>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <vTaskSwitchContext+0x94>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ed0:	e037      	b.n	8003f42 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <vTaskSwitchContext+0x94>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <vTaskSwitchContext+0x98>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	e007      	b.n	8003ef0 <vTaskSwitchContext+0x34>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <vTaskSwitchContext+0x2e>
 8003ee6:	b672      	cpsid	i
 8003ee8:	e7fe      	b.n	8003ee8 <vTaskSwitchContext+0x2c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	4919      	ldr	r1, [pc, #100]	; (8003f58 <vTaskSwitchContext+0x9c>)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	585b      	ldr	r3, [r3, r1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ee      	beq.n	8003ee0 <vTaskSwitchContext+0x24>
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	0013      	movs	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <vTaskSwitchContext+0x9c>)
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d104      	bne.n	8003f32 <vTaskSwitchContext+0x76>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <vTaskSwitchContext+0xa0>)
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <vTaskSwitchContext+0x98>)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	20000524 	.word	0x20000524
 8003f50:	20000514 	.word	0x20000514
 8003f54:	20000508 	.word	0x20000508
 8003f58:	20000034 	.word	0x20000034
 8003f5c:	20000030 	.word	0x20000030

08003f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	e00c      	b.n	8003f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	0013      	movs	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7ff fc04 	bl	8003788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b37      	cmp	r3, #55	; 0x37
 8003f8a:	d9ef      	bls.n	8003f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <prvInitialiseTaskLists+0x6c>)
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7ff fbfa 	bl	8003788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <prvInitialiseTaskLists+0x70>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fbf6 	bl	8003788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <prvInitialiseTaskLists+0x74>)
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7ff fbf2 	bl	8003788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <prvInitialiseTaskLists+0x78>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff fbee 	bl	8003788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <prvInitialiseTaskLists+0x7c>)
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff fbea 	bl	8003788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <prvInitialiseTaskLists+0x80>)
 8003fb6:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <prvInitialiseTaskLists+0x6c>)
 8003fb8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <prvInitialiseTaskLists+0x84>)
 8003fbc:	4a04      	ldr	r2, [pc, #16]	; (8003fd0 <prvInitialiseTaskLists+0x70>)
 8003fbe:	601a      	str	r2, [r3, #0]
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000034 	.word	0x20000034
 8003fcc:	20000494 	.word	0x20000494
 8003fd0:	200004a8 	.word	0x200004a8
 8003fd4:	200004c4 	.word	0x200004c4
 8003fd8:	200004d8 	.word	0x200004d8
 8003fdc:	200004ec 	.word	0x200004ec
 8003fe0:	200004bc 	.word	0x200004bc
 8003fe4:	200004c0 	.word	0x200004c0

08003fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <prvResetNextTaskUnblockTime+0x34>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <prvResetNextTaskUnblockTime+0x38>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4252      	negs	r2, r2
 8003ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004000:	e008      	b.n	8004014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <prvResetNextTaskUnblockTime+0x34>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <prvResetNextTaskUnblockTime+0x38>)
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}
 800401c:	200004bc 	.word	0x200004bc
 8004020:	20000520 	.word	0x20000520

08004024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <xTaskGetSchedulerState+0x30>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004032:	2301      	movs	r3, #1
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	e008      	b.n	800404a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <xTaskGetSchedulerState+0x34>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004040:	2302      	movs	r3, #2
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	e001      	b.n	800404a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800404a:	687b      	ldr	r3, [r7, #4]
	}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}
 8004054:	2000050c 	.word	0x2000050c
 8004058:	20000524 	.word	0x20000524

0800405c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <prvAddCurrentTaskToDelayedList+0x90>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406c:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3304      	adds	r3, #4
 8004072:	0018      	movs	r0, r3
 8004074:	f7ff fc09 	bl	800388a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3301      	adds	r3, #1
 800407c:	d10b      	bne.n	8004096 <prvAddCurrentTaskToDelayedList+0x3a>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff fba3 	bl	80037da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004094:	e026      	b.n	80040e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	18d3      	adds	r3, r2, r3
 800409c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d209      	bcs.n	80040c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3304      	adds	r3, #4
 80040b8:	0019      	movs	r1, r3
 80040ba:	0010      	movs	r0, r2
 80040bc:	f7ff fbaf 	bl	800381e <vListInsert>
}
 80040c0:	e010      	b.n	80040e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3304      	adds	r3, #4
 80040cc:	0019      	movs	r1, r3
 80040ce:	0010      	movs	r0, r2
 80040d0:	f7ff fba5 	bl	800381e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d202      	bcs.n	80040e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000504 	.word	0x20000504
 80040f0:	20000030 	.word	0x20000030
 80040f4:	200004ec 	.word	0x200004ec
 80040f8:	200004c0 	.word	0x200004c0
 80040fc:	200004bc 	.word	0x200004bc
 8004100:	20000520 	.word	0x20000520

08004104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b04      	subs	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	0452      	lsls	r2, r2, #17
 800411c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3b04      	subs	r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b04      	subs	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <pxPortInitialiseStack+0x50>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b14      	subs	r3, #20
 800413a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b20      	subs	r3, #32
 8004146:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	08004159 	.word	0x08004159

08004158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <prvTaskExitError+0x2c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	d001      	beq.n	800416e <prvTaskExitError+0x16>
 800416a:	b672      	cpsid	i
 800416c:	e7fe      	b.n	800416c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800416e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0fc      	beq.n	8004172 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b002      	add	sp, #8
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	2000000c 	.word	0x2000000c

08004188 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <vPortYield+0x1c>)
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	0552      	lsls	r2, r2, #21
 800419e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80041a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80041a4:	f3bf 8f6f 	isb	sy
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80041b8:	b672      	cpsid	i
	uxCriticalNesting++;
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <vPortEnterCritical+0x20>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <vPortEnterCritical+0x20>)
 80041c2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80041c4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80041c8:	f3bf 8f6f 	isb	sy
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	2000000c 	.word	0x2000000c

080041d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <vPortExitCritical+0x2c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <vPortExitCritical+0x10>
 80041e4:	b672      	cpsid	i
 80041e6:	e7fe      	b.n	80041e6 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <vPortExitCritical+0x2c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <vPortExitCritical+0x2c>)
 80041f0:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <vPortExitCritical+0x2c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d100      	bne.n	80041fc <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80041fa:	b662      	cpsie	i
	}
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	2000000c 	.word	0x2000000c

08004208 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004208:	f3ef 8010 	mrs	r0, PRIMASK
 800420c:	b672      	cpsid	i
 800420e:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	0018      	movs	r0, r3

08004214 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004214:	f380 8810 	msr	PRIMASK, r0
 8004218:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	0000      	movs	r0, r0
	...

08004220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004220:	f3ef 8009 	mrs	r0, PSP
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <pxCurrentTCBConst>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	3820      	subs	r0, #32
 800422a:	6010      	str	r0, [r2, #0]
 800422c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800422e:	4644      	mov	r4, r8
 8004230:	464d      	mov	r5, r9
 8004232:	4656      	mov	r6, sl
 8004234:	465f      	mov	r7, fp
 8004236:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004238:	b508      	push	{r3, lr}
 800423a:	b672      	cpsid	i
 800423c:	f7ff fe3e 	bl	8003ebc <vTaskSwitchContext>
 8004240:	b662      	cpsie	i
 8004242:	bc0c      	pop	{r2, r3}
 8004244:	6811      	ldr	r1, [r2, #0]
 8004246:	6808      	ldr	r0, [r1, #0]
 8004248:	3010      	adds	r0, #16
 800424a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800424c:	46a0      	mov	r8, r4
 800424e:	46a9      	mov	r9, r5
 8004250:	46b2      	mov	sl, r6
 8004252:	46bb      	mov	fp, r7
 8004254:	f380 8809 	msr	PSP, r0
 8004258:	3820      	subs	r0, #32
 800425a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800425c:	4718      	bx	r3
 800425e:	46c0      	nop			; (mov r8, r8)

08004260 <pxCurrentTCBConst>:
 8004260:	20000030 	.word	0x20000030
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46c0      	nop			; (mov r8, r8)

08004268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800426e:	f7ff ffcb 	bl	8004208 <ulSetInterruptMaskFromISR>
 8004272:	0003      	movs	r3, r0
 8004274:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004276:	f7ff fd71 	bl	8003d5c <xTaskIncrementTick>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d003      	beq.n	8004286 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <xPortSysTickHandler+0x30>)
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	0552      	lsls	r2, r2, #21
 8004284:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff ffc3 	bl	8004214 <vClearInterruptMaskFromISR>
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b002      	add	sp, #8
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80042a8:	f7ff fcc0 	bl	8003c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042ac:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <pvPortMalloc+0x140>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042b4:	f000 f8ec 	bl	8004490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042b8:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <pvPortMalloc+0x144>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4013      	ands	r3, r2
 80042c0:	d000      	beq.n	80042c4 <pvPortMalloc+0x28>
 80042c2:	e07e      	b.n	80043c2 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80042ca:	2208      	movs	r2, #8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2207      	movs	r2, #7
 80042d6:	4013      	ands	r3, r2
 80042d8:	d00a      	beq.n	80042f0 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2207      	movs	r2, #7
 80042de:	4393      	bics	r3, r2
 80042e0:	3308      	adds	r3, #8
 80042e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2207      	movs	r2, #7
 80042e8:	4013      	ands	r3, r2
 80042ea:	d001      	beq.n	80042f0 <pvPortMalloc+0x54>
 80042ec:	b672      	cpsid	i
 80042ee:	e7fe      	b.n	80042ee <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d065      	beq.n	80043c2 <pvPortMalloc+0x126>
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <pvPortMalloc+0x148>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d860      	bhi.n	80043c2 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <pvPortMalloc+0x14c>)
 8004302:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004304:	4b38      	ldr	r3, [pc, #224]	; (80043e8 <pvPortMalloc+0x14c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800430a:	e004      	b.n	8004316 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d903      	bls.n	8004328 <pvPortMalloc+0x8c>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f1      	bne.n	800430c <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <pvPortMalloc+0x140>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	429a      	cmp	r2, r3
 8004330:	d047      	beq.n	80043c2 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2208      	movs	r2, #8
 8004338:	189b      	adds	r3, r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	2308      	movs	r3, #8
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	429a      	cmp	r2, r3
 8004352:	d916      	bls.n	8004382 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	18d3      	adds	r3, r2, r3
 800435a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2207      	movs	r2, #7
 8004360:	4013      	ands	r3, r2
 8004362:	d001      	beq.n	8004368 <pvPortMalloc+0xcc>
 8004364:	b672      	cpsid	i
 8004366:	e7fe      	b.n	8004366 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0018      	movs	r0, r3
 800437e:	f000 f8e7 	bl	8004550 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <pvPortMalloc+0x148>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <pvPortMalloc+0x148>)
 800438e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <pvPortMalloc+0x148>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b15      	ldr	r3, [pc, #84]	; (80043ec <pvPortMalloc+0x150>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d203      	bcs.n	80043a4 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <pvPortMalloc+0x148>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <pvPortMalloc+0x150>)
 80043a2:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <pvPortMalloc+0x144>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80043b8:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <pvPortMalloc+0x154>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <pvPortMalloc+0x154>)
 80043c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043c2:	f7ff fc3f 	bl	8003c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2207      	movs	r2, #7
 80043ca:	4013      	ands	r3, r2
 80043cc:	d001      	beq.n	80043d2 <pvPortMalloc+0x136>
 80043ce:	b672      	cpsid	i
 80043d0:	e7fe      	b.n	80043d0 <pvPortMalloc+0x134>
	return pvReturn;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b006      	add	sp, #24
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20001130 	.word	0x20001130
 80043e0:	20001144 	.word	0x20001144
 80043e4:	20001134 	.word	0x20001134
 80043e8:	20001128 	.word	0x20001128
 80043ec:	20001138 	.word	0x20001138
 80043f0:	2000113c 	.word	0x2000113c

080043f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03a      	beq.n	800447c <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004406:	2308      	movs	r3, #8
 8004408:	425b      	negs	r3, r3
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <vPortFree+0x90>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4013      	ands	r3, r2
 800441e:	d101      	bne.n	8004424 <vPortFree+0x30>
 8004420:	b672      	cpsid	i
 8004422:	e7fe      	b.n	8004422 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <vPortFree+0x3c>
 800442c:	b672      	cpsid	i
 800442e:	e7fe      	b.n	800442e <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <vPortFree+0x90>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4013      	ands	r3, r2
 800443a:	d01f      	beq.n	800447c <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11b      	bne.n	800447c <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <vPortFree+0x90>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	43db      	mvns	r3, r3
 800444e:	401a      	ands	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004454:	f7ff fbea 	bl	8003c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <vPortFree+0x94>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	18d2      	adds	r2, r2, r3
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <vPortFree+0x94>)
 8004464:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f871 	bl	8004550 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <vPortFree+0x98>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <vPortFree+0x98>)
 8004476:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8004478:	f7ff fbe4 	bl	8003c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b004      	add	sp, #16
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20001144 	.word	0x20001144
 8004488:	20001134 	.word	0x20001134
 800448c:	20001140 	.word	0x20001140

08004490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004496:	23c0      	movs	r3, #192	; 0xc0
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <prvHeapInit+0xa8>)
 800449e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2207      	movs	r2, #7
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00c      	beq.n	80044c2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3307      	adds	r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2207      	movs	r2, #7
 80044b2:	4393      	bics	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <prvHeapInit+0xa8>)
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <prvHeapInit+0xac>)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <prvHeapInit+0xac>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	18d3      	adds	r3, r2, r3
 80044d8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044da:	2208      	movs	r2, #8
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2207      	movs	r2, #7
 80044e6:	4393      	bics	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <prvHeapInit+0xb0>)
 80044ee:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <prvHeapInit+0xb0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <prvHeapInit+0xb0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	1ad2      	subs	r2, r2, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <prvHeapInit+0xb0>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvHeapInit+0xb4>)
 800451c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <prvHeapInit+0xb8>)
 8004524:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <prvHeapInit+0xbc>)
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	0612      	lsls	r2, r2, #24
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	20000528 	.word	0x20000528
 800453c:	20001128 	.word	0x20001128
 8004540:	20001130 	.word	0x20001130
 8004544:	20001138 	.word	0x20001138
 8004548:	20001134 	.word	0x20001134
 800454c:	20001144 	.word	0x20001144

08004550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004558:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <prvInsertBlockIntoFreeList+0xa8>)
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e002      	b.n	8004564 <prvInsertBlockIntoFreeList+0x14>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d8f7      	bhi.n	800455e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d108      	bne.n	8004592 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	18d2      	adds	r2, r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	18d2      	adds	r2, r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d118      	bne.n	80045d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b14      	ldr	r3, [pc, #80]	; (80045fc <prvInsertBlockIntoFreeList+0xac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d00d      	beq.n	80045ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	18d2      	adds	r2, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e008      	b.n	80045e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <prvInsertBlockIntoFreeList+0xac>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e003      	b.n	80045e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d002      	beq.n	80045ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	20001128 	.word	0x20001128
 80045fc:	20001130 	.word	0x20001130

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	2600      	movs	r6, #0
 8004604:	4d0c      	ldr	r5, [pc, #48]	; (8004638 <__libc_init_array+0x38>)
 8004606:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004608:	1b64      	subs	r4, r4, r5
 800460a:	10a4      	asrs	r4, r4, #2
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	2600      	movs	r6, #0
 8004612:	f000 f821 	bl	8004658 <_init>
 8004616:	4d0a      	ldr	r5, [pc, #40]	; (8004640 <__libc_init_array+0x40>)
 8004618:	4c0a      	ldr	r4, [pc, #40]	; (8004644 <__libc_init_array+0x44>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	00b3      	lsls	r3, r6, #2
 8004626:	58eb      	ldr	r3, [r5, r3]
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	00b3      	lsls	r3, r6, #2
 8004630:	58eb      	ldr	r3, [r5, r3]
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	080047b8 	.word	0x080047b8
 800463c:	080047b8 	.word	0x080047b8
 8004640:	080047b8 	.word	0x080047b8
 8004644:	080047bc 	.word	0x080047bc

08004648 <memset>:
 8004648:	0003      	movs	r3, r0
 800464a:	1882      	adds	r2, r0, r2
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	7019      	strb	r1, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
